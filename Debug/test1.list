
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003080  08003080  00013080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080030b8  080030b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080030bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000218  20000004  080030c0  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000021c  080030c0  0002021c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e448  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001bc6  00000000  00000000  0002e475  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000938  00000000  00000000  00030040  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000880  00000000  00000000  00030978  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000043df  00000000  00000000  000311f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002fd7  00000000  00000000  000355d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000385ae  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002578  00000000  00000000  0003862c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08003068 	.word	0x08003068

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08003068 	.word	0x08003068

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f001 f8fd 	bl	800135c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fdd2 	bl	8002d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <HAL_InitTick+0x30>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a09      	ldr	r2, [pc, #36]	; (80001ac <HAL_InitTick+0x34>)
 8000186:	fba2 2303 	umull	r2, r3, r2, r3
 800018a:	099b      	lsrs	r3, r3, #6
 800018c:	4618      	mov	r0, r3
 800018e:	f001 f91a 	bl	80013c6 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000192:	2200      	movs	r2, #0
 8000194:	6879      	ldr	r1, [r7, #4]
 8000196:	f04f 30ff 	mov.w	r0, #4294967295
 800019a:	f001 f8ea 	bl	8001372 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800019e:	2300      	movs	r3, #0
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	3708      	adds	r7, #8
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	20000000 	.word	0x20000000
 80001ac:	10624dd3 	.word	0x10624dd3

080001b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
  uwTick++;
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <HAL_IncTick+0x18>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	3301      	adds	r3, #1
 80001ba:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x18>)
 80001bc:	6013      	str	r3, [r2, #0]
}
 80001be:	bf00      	nop
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028

080001cc <HAL_GetTick>:
  * @note  This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
  return uwTick;
 80001d0:	4b02      	ldr	r3, [pc, #8]	; (80001dc <HAL_GetTick+0x10>)
 80001d2:	681b      	ldr	r3, [r3, #0]
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	20000028 	.word	0x20000028

080001e0 <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b086      	sub	sp, #24
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
 80001e8:	2300      	movs	r3, #0
 80001ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80001ec:	2300      	movs	r3, #0
 80001ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_mcr = 0U;
 80001f0:	2300      	movs	r3, #0
 80001f2:	613b      	str	r3, [r7, #16]
  
  /* Check CAN handle */
  if(hcan == NULL)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d101      	bne.n	80001fe <HAL_CAN_Init+0x1e>
  {
     return HAL_ERROR;
 80001fa:	2301      	movs	r3, #1
 80001fc:	e0ec      	b.n	80003d8 <HAL_CAN_Init+0x1f8>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000204:	b2db      	uxtb	r3, r3
 8000206:	2b00      	cmp	r3, #0
 8000208:	d106      	bne.n	8000218 <HAL_CAN_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2200      	movs	r2, #0
 800020e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8000212:	6878      	ldr	r0, [r7, #4]
 8000214:	f002 fdc4 	bl	8002da0 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2202      	movs	r2, #2
 800021c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	687a      	ldr	r2, [r7, #4]
 8000226:	6812      	ldr	r2, [r2, #0]
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	f022 0202 	bic.w	r2, r2, #2
 800022e:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	6812      	ldr	r2, [r2, #0]
 8000238:	6812      	ldr	r2, [r2, #0]
 800023a:	f042 0201 	orr.w	r2, r2, #1
 800023e:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();   
 8000240:	f7ff ffc4 	bl	80001cc <HAL_GetTick>
 8000244:	60f8      	str	r0, [r7, #12]
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000246:	e010      	b.n	800026a <HAL_CAN_Init+0x8a>
  {
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000248:	f7ff ffc0 	bl	80001cc <HAL_GetTick>
 800024c:	4602      	mov	r2, r0
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	1ad3      	subs	r3, r2, r3
 8000252:	2b0a      	cmp	r3, #10
 8000254:	d909      	bls.n	800026a <HAL_CAN_Init+0x8a>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2203      	movs	r2, #3
 800025a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2200      	movs	r2, #0
 8000262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      return HAL_TIMEOUT;
 8000266:	2303      	movs	r3, #3
 8000268:	e0b6      	b.n	80003d8 <HAL_CAN_Init+0x1f8>
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	f003 0301 	and.w	r3, r3, #1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d0e7      	beq.n	8000248 <HAL_CAN_Init+0x68>
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	2b01      	cmp	r3, #1
 8000284:	f040 8097 	bne.w	80003b6 <HAL_CAN_Init+0x1d6>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d104      	bne.n	800029a <HAL_CAN_Init+0xba>
    {
      SET_BIT(tmp_mcr, CAN_MCR_TTCM);
 8000290:	693b      	ldr	r3, [r7, #16]
 8000292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000296:	613b      	str	r3, [r7, #16]
 8000298:	e003      	b.n	80002a2 <HAL_CAN_Init+0xc2>
    }
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_TTCM);
 800029a:	693b      	ldr	r3, [r7, #16]
 800029c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002a0:	613b      	str	r3, [r7, #16]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	69db      	ldr	r3, [r3, #28]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d104      	bne.n	80002b4 <HAL_CAN_Init+0xd4>
    {
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 80002aa:	693b      	ldr	r3, [r7, #16]
 80002ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002b0:	613b      	str	r3, [r7, #16]
 80002b2:	e003      	b.n	80002bc <HAL_CAN_Init+0xdc>
    }
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_ABOM);
 80002b4:	693b      	ldr	r3, [r7, #16]
 80002b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002ba:	613b      	str	r3, [r7, #16]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	6a1b      	ldr	r3, [r3, #32]
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d104      	bne.n	80002ce <HAL_CAN_Init+0xee>
    {
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 80002c4:	693b      	ldr	r3, [r7, #16]
 80002c6:	f043 0320 	orr.w	r3, r3, #32
 80002ca:	613b      	str	r3, [r7, #16]
 80002cc:	e003      	b.n	80002d6 <HAL_CAN_Init+0xf6>
    }
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_AWUM);
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	f023 0320 	bic.w	r3, r3, #32
 80002d4:	613b      	str	r3, [r7, #16]
    }
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d104      	bne.n	80002e8 <HAL_CAN_Init+0x108>
    {
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	f043 0310 	orr.w	r3, r3, #16
 80002e4:	613b      	str	r3, [r7, #16]
 80002e6:	e003      	b.n	80002f0 <HAL_CAN_Init+0x110>
    }
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_NART);
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	f023 0310 	bic.w	r3, r3, #16
 80002ee:	613b      	str	r3, [r7, #16]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d104      	bne.n	8000302 <HAL_CAN_Init+0x122>
    {
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 80002f8:	693b      	ldr	r3, [r7, #16]
 80002fa:	f043 0308 	orr.w	r3, r3, #8
 80002fe:	613b      	str	r3, [r7, #16]
 8000300:	e003      	b.n	800030a <HAL_CAN_Init+0x12a>
    }
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_RFLM);
 8000302:	693b      	ldr	r3, [r7, #16]
 8000304:	f023 0308 	bic.w	r3, r3, #8
 8000308:	613b      	str	r3, [r7, #16]
    }
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030e:	2b01      	cmp	r3, #1
 8000310:	d104      	bne.n	800031c <HAL_CAN_Init+0x13c>
    {
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 8000312:	693b      	ldr	r3, [r7, #16]
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	613b      	str	r3, [r7, #16]
 800031a:	e003      	b.n	8000324 <HAL_CAN_Init+0x144>
    }
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_TXFP);
 800031c:	693b      	ldr	r3, [r7, #16]
 800031e:	f023 0304 	bic.w	r3, r3, #4
 8000322:	613b      	str	r3, [r7, #16]
    }
    
    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	687a      	ldr	r2, [r7, #4]
 800032a:	6812      	ldr	r2, [r2, #0]
 800032c:	6812      	ldr	r2, [r2, #0]
 800032e:	f022 01fc 	bic.w	r1, r2, #252	; 0xfc
 8000332:	693a      	ldr	r2, [r7, #16]
 8000334:	430a      	orrs	r2, r1
 8000336:	601a      	str	r2, [r3, #0]
               CAN_MCR_RFLM |
               CAN_MCR_TXFP,
               tmp_mcr);
    
    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	6891      	ldr	r1, [r2, #8]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	68d2      	ldr	r2, [r2, #12]
 8000344:	4311      	orrs	r1, r2
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	6912      	ldr	r2, [r2, #16]
 800034a:	4311      	orrs	r1, r2
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	6952      	ldr	r2, [r2, #20]
 8000350:	4311      	orrs	r1, r2
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	6852      	ldr	r2, [r2, #4]
 8000356:	3a01      	subs	r2, #1
 8000358:	430a      	orrs	r2, r1
 800035a:	61da      	str	r2, [r3, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1U)));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	6812      	ldr	r2, [r2, #0]
 8000364:	6812      	ldr	r2, [r2, #0]
 8000366:	f022 0201 	bic.w	r2, r2, #1
 800036a:	601a      	str	r2, [r3, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();   
 800036c:	f7ff ff2e 	bl	80001cc <HAL_GetTick>
 8000370:	60f8      	str	r0, [r7, #12]
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8000372:	e010      	b.n	8000396 <HAL_CAN_Init+0x1b6>
    {
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000374:	f7ff ff2a 	bl	80001cc <HAL_GetTick>
 8000378:	4602      	mov	r2, r0
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	2b0a      	cmp	r3, #10
 8000380:	d909      	bls.n	8000396 <HAL_CAN_Init+0x1b6>
      {
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2203      	movs	r2, #3
 8000386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Process unlocked */
        __HAL_UNLOCK(hcan);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2200      	movs	r2, #0
 800038e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_TIMEOUT;
 8000392:	2303      	movs	r3, #3
 8000394:	e020      	b.n	80003d8 <HAL_CAN_Init+0x1f8>
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	f003 0301 	and.w	r3, r3, #1
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e7      	bne.n	8000374 <HAL_CAN_Init+0x194>
      }
    }

    /* Check acknowledged */
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <HAL_CAN_Init+0x1d6>
    {
      status = CAN_INITSTATUS_SUCCESS;
 80003b2:	2301      	movs	r3, #1
 80003b4:	617b      	str	r3, [r7, #20]
    }
  }
 
  if(status == CAN_INITSTATUS_SUCCESS)
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d108      	bne.n	80003ce <HAL_CAN_Init+0x1ee>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2200      	movs	r2, #0
 80003c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	2201      	movs	r2, #1
 80003c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
    /* Return function status */
    return HAL_OK;
 80003ca:	2300      	movs	r3, #0
 80003cc:	e004      	b.n	80003d8 <HAL_CAN_Init+0x1f8>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	2204      	movs	r2, #4
 80003d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_ERROR;
 80003d6:	2301      	movs	r3, #1
  }
}
 80003d8:	4618      	mov	r0, r3
 80003da:	3718      	adds	r7, #24
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig: pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos = 0U;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	2201      	movs	r2, #1
 80003f4:	fa02 f303 	lsl.w	r3, r2, r3
 80003f8:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	6812      	ldr	r2, [r2, #0]
 8000402:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8000406:	f422 517c 	bic.w	r1, r2, #16128	; 0x3f00
 800040a:	683a      	ldr	r2, [r7, #0]
 800040c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800040e:	0212      	lsls	r2, r2, #8
 8000410:	430a      	orrs	r2, r1
 8000412:	f042 0201 	orr.w	r2, r2, #1
 8000416:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8U)   );

  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	6812      	ldr	r2, [r2, #0]
 8000422:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8000426:	68fa      	ldr	r2, [r7, #12]
 8000428:	43d2      	mvns	r2, r2
 800042a:	400a      	ands	r2, r1
 800042c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	69db      	ldr	r3, [r3, #28]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d127      	bne.n	8000488 <HAL_CAN_ConfigFilter+0xa8>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	6812      	ldr	r2, [r2, #0]
 8000440:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8000444:	68fa      	ldr	r2, [r7, #12]
 8000446:	43d2      	mvns	r2, r2
 8000448:	400a      	ands	r2, r1
 800044a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	683a      	ldr	r2, [r7, #0]
 8000454:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000456:	6839      	ldr	r1, [r7, #0]
 8000458:	68c9      	ldr	r1, [r1, #12]
 800045a:	0408      	lsls	r0, r1, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800045c:	6839      	ldr	r1, [r7, #0]
 800045e:	6849      	ldr	r1, [r1, #4]
 8000460:	b289      	uxth	r1, r1
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000462:	4301      	orrs	r1, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000464:	3248      	adds	r2, #72	; 0x48
 8000466:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6819      	ldr	r1, [r3, #0]
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000472:	683a      	ldr	r2, [r7, #0]
 8000474:	6892      	ldr	r2, [r2, #8]
 8000476:	0410      	lsls	r0, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000478:	683a      	ldr	r2, [r7, #0]
 800047a:	6812      	ldr	r2, [r2, #0]
 800047c:	b292      	uxth	r2, r2
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800047e:	4302      	orrs	r2, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8000480:	3348      	adds	r3, #72	; 0x48
 8000482:	00db      	lsls	r3, r3, #3
 8000484:	440b      	add	r3, r1
 8000486:	605a      	str	r2, [r3, #4]
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d126      	bne.n	80004de <HAL_CAN_ConfigFilter+0xfe>
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	6812      	ldr	r2, [r2, #0]
 8000498:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 800049c:	68fa      	ldr	r2, [r7, #12]
 800049e:	430a      	orrs	r2, r1
 80004a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	683a      	ldr	r2, [r7, #0]
 80004aa:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80004ac:	6839      	ldr	r1, [r7, #0]
 80004ae:	6809      	ldr	r1, [r1, #0]
 80004b0:	0408      	lsls	r0, r1, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80004b2:	6839      	ldr	r1, [r7, #0]
 80004b4:	6849      	ldr	r1, [r1, #4]
 80004b6:	b289      	uxth	r1, r1
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80004b8:	4301      	orrs	r1, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80004ba:	3248      	adds	r2, #72	; 0x48
 80004bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	6819      	ldr	r1, [r3, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80004c8:	683a      	ldr	r2, [r7, #0]
 80004ca:	6892      	ldr	r2, [r2, #8]
 80004cc:	0410      	lsls	r0, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80004ce:	683a      	ldr	r2, [r7, #0]
 80004d0:	68d2      	ldr	r2, [r2, #12]
 80004d2:	b292      	uxth	r2, r2
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80004d4:	4302      	orrs	r2, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80004d6:	3348      	adds	r3, #72	; 0x48
 80004d8:	00db      	lsls	r3, r3, #3
 80004da:	440b      	add	r3, r1
 80004dc:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d10b      	bne.n	80004fe <HAL_CAN_ConfigFilter+0x11e>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	6812      	ldr	r2, [r2, #0]
 80004ee:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	43d2      	mvns	r2, r2
 80004f6:	400a      	ands	r2, r1
 80004f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80004fc:	e009      	b.n	8000512 <HAL_CAN_ConfigFilter+0x132>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	6812      	ldr	r2, [r2, #0]
 8000506:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	430a      	orrs	r2, r1
 800050e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	691b      	ldr	r3, [r3, #16]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d10b      	bne.n	8000532 <HAL_CAN_ConfigFilter+0x152>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	6812      	ldr	r2, [r2, #0]
 8000522:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8000526:	68fa      	ldr	r2, [r7, #12]
 8000528:	43d2      	mvns	r2, r2
 800052a:	400a      	ands	r2, r1
 800052c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000530:	e009      	b.n	8000546 <HAL_CAN_ConfigFilter+0x166>
  }
  else
  {
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	6812      	ldr	r2, [r2, #0]
 800053a:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800053e:	68fa      	ldr	r2, [r7, #12]
 8000540:	430a      	orrs	r2, r1
 8000542:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	6a1b      	ldr	r3, [r3, #32]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d109      	bne.n	8000562 <HAL_CAN_ConfigFilter+0x182>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	6812      	ldr	r2, [r2, #0]
 8000556:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	430a      	orrs	r2, r1
 800055e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	6812      	ldr	r2, [r2, #0]
 800056a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800056e:	f022 0201 	bic.w	r2, r2, #1
 8000572:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr
	...

08000584 <HAL_CAN_Transmit>:
  *         the configuration information for the specified CAN.  
  * @param  Timeout: Specify Timeout value   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]

  uint32_t transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
 800058e:	2304      	movs	r3, #4
 8000590:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80005a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80005a4:	d010      	beq.n	80005c8 <HAL_CAN_Transmit+0x44>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80005b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80005b4:	d008      	beq.n	80005c8 <HAL_CAN_Transmit+0x44>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 80005c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80005c4:	f040 817b 	bne.w	80008be <HAL_CAN_Transmit+0x33a>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d101      	bne.n	80005d6 <HAL_CAN_Transmit+0x52>
 80005d2:	2302      	movs	r3, #2
 80005d4:	e178      	b.n	80008c8 <HAL_CAN_Transmit+0x344>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2201      	movs	r2, #1
 80005da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Change CAN state */
    switch(hcan->State)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b32      	cmp	r3, #50	; 0x32
 80005e8:	d008      	beq.n	80005fc <HAL_CAN_Transmit+0x78>
 80005ea:	2b62      	cmp	r3, #98	; 0x62
 80005ec:	d00b      	beq.n	8000606 <HAL_CAN_Transmit+0x82>
 80005ee:	2b22      	cmp	r3, #34	; 0x22
 80005f0:	d10e      	bne.n	8000610 <HAL_CAN_Transmit+0x8c>
    {
      case(HAL_CAN_STATE_BUSY_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2242      	movs	r2, #66	; 0x42
 80005f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          break;
 80005fa:	e00e      	b.n	800061a <HAL_CAN_Transmit+0x96>
      case(HAL_CAN_STATE_BUSY_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2252      	movs	r2, #82	; 0x52
 8000600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          break;
 8000604:	e009      	b.n	800061a <HAL_CAN_Transmit+0x96>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2272      	movs	r2, #114	; 0x72
 800060a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          break;
 800060e:	e004      	b.n	800061a <HAL_CAN_Transmit+0x96>
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2212      	movs	r2, #18
 8000614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          break;
 8000618:	bf00      	nop
    }

    /* Select one empty transmit mailbox */
    if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000624:	2b00      	cmp	r3, #0
 8000626:	d002      	beq.n	800062e <HAL_CAN_Transmit+0xaa>
    {
      transmitmailbox = CAN_TXMAILBOX_0;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e00b      	b.n	8000646 <HAL_CAN_Transmit+0xc2>
    }
    else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000638:	2b00      	cmp	r3, #0
 800063a:	d002      	beq.n	8000642 <HAL_CAN_Transmit+0xbe>
    {
      transmitmailbox = CAN_TXMAILBOX_1;
 800063c:	2301      	movs	r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	e001      	b.n	8000646 <HAL_CAN_Transmit+0xc2>
    }
    else
    {
      transmitmailbox = CAN_TXMAILBOX_2;
 8000642:	2302      	movs	r3, #2
 8000644:	60fb      	str	r3, [r7, #12]
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6819      	ldr	r1, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	3318      	adds	r3, #24
 8000652:	011b      	lsls	r3, r3, #4
 8000654:	4413      	add	r3, r2
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f003 0201 	and.w	r2, r3, #1
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3318      	adds	r3, #24
 8000660:	011b      	lsls	r3, r3, #4
 8000662:	440b      	add	r3, r1
 8000664:	601a      	str	r2, [r3, #0]
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d117      	bne.n	80006a0 <HAL_CAN_Transmit+0x11c>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) |
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6819      	ldr	r1, [r3, #0]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3318      	adds	r3, #24
 800067c:	011b      	lsls	r3, r3, #4
 800067e:	4413      	add	r3, r2
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	0558      	lsls	r0, r3, #21
                                                           hcan->pTxMsg->RTR);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	68db      	ldr	r3, [r3, #12]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) |
 8000690:	4303      	orrs	r3, r0
 8000692:	431a      	orrs	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	3318      	adds	r3, #24
 8000698:	011b      	lsls	r3, r3, #4
 800069a:	440b      	add	r3, r1
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	e01a      	b.n	80006d6 <HAL_CAN_Transmit+0x152>
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) |
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6819      	ldr	r1, [r3, #0]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3318      	adds	r3, #24
 80006ac:	011b      	lsls	r3, r3, #4
 80006ae:	4413      	add	r3, r2
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	00d8      	lsls	r0, r3, #3
                                                           hcan->pTxMsg->IDE |
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	689b      	ldr	r3, [r3, #8]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) |
 80006c0:	4318      	orrs	r0, r3
                                                           hcan->pTxMsg->RTR);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	68db      	ldr	r3, [r3, #12]
                                                           hcan->pTxMsg->IDE |
 80006c8:	4303      	orrs	r3, r0
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) |
 80006ca:	431a      	orrs	r2, r3
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3318      	adds	r3, #24
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	440b      	add	r3, r1
 80006d4:	601a      	str	r2, [r3, #0]
    }

    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80006de:	6912      	ldr	r2, [r2, #16]
 80006e0:	f002 020f 	and.w	r2, r2, #15
 80006e4:	611a      	str	r2, [r3, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6819      	ldr	r1, [r3, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	3318      	adds	r3, #24
 80006f2:	011b      	lsls	r3, r3, #4
 80006f4:	4413      	add	r3, r2
 80006f6:	3304      	adds	r3, #4
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f023 020f 	bic.w	r2, r3, #15
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3318      	adds	r3, #24
 8000702:	011b      	lsls	r3, r3, #4
 8000704:	440b      	add	r3, r1
 8000706:	3304      	adds	r3, #4
 8000708:	601a      	str	r2, [r3, #0]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6819      	ldr	r1, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	3318      	adds	r3, #24
 8000716:	011b      	lsls	r3, r3, #4
 8000718:	4413      	add	r3, r2
 800071a:	3304      	adds	r3, #4
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	691b      	ldr	r3, [r3, #16]
 8000724:	431a      	orrs	r2, r3
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	3318      	adds	r3, #24
 800072a:	011b      	lsls	r3, r3, #4
 800072c:	440b      	add	r3, r1
 800072e:	3304      	adds	r3, #4
 8000730:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) | 
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6819      	ldr	r1, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	7ddb      	ldrb	r3, [r3, #23]
 800073c:	061a      	lsls	r2, r3, #24
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	7d9b      	ldrb	r3, [r3, #22]
 8000744:	041b      	lsls	r3, r3, #16
 8000746:	431a      	orrs	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074c:	7d5b      	ldrb	r3, [r3, #21]
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	4313      	orrs	r3, r2
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000756:	7d12      	ldrb	r2, [r2, #20]
 8000758:	431a      	orrs	r2, r3
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	011b      	lsls	r3, r3, #4
 800075e:	440b      	add	r3, r1
 8000760:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000764:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[2] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[1] << CAN_TDL0R_DATA1_Pos) | 
                                                                ((uint32_t)hcan->pTxMsg->Data[0] << CAN_TDL0R_DATA0_Pos));
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_Pos) | 
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6819      	ldr	r1, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	7edb      	ldrb	r3, [r3, #27]
 8000770:	061a      	lsls	r2, r3, #24
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	7e9b      	ldrb	r3, [r3, #26]
 8000778:	041b      	lsls	r3, r3, #16
 800077a:	431a      	orrs	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000780:	7e5b      	ldrb	r3, [r3, #25]
 8000782:	021b      	lsls	r3, r3, #8
 8000784:	4313      	orrs	r3, r2
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800078a:	7e12      	ldrb	r2, [r2, #24]
 800078c:	431a      	orrs	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	011b      	lsls	r3, r3, #4
 8000792:	440b      	add	r3, r1
 8000794:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000798:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[6] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[5] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[4] << CAN_TDL0R_DATA0_Pos));
    /* Request transmission */
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6819      	ldr	r1, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	3318      	adds	r3, #24
 80007a6:	011b      	lsls	r3, r3, #4
 80007a8:	4413      	add	r3, r2
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f043 0201 	orr.w	r2, r3, #1
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	3318      	adds	r3, #24
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	440b      	add	r3, r1
 80007b8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80007ba:	f7ff fd07 	bl	80001cc <HAL_GetTick>
 80007be:	60b8      	str	r0, [r7, #8]

    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 80007c0:	e02e      	b.n	8000820 <HAL_CAN_Transmit+0x29c>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c8:	d02a      	beq.n	8000820 <HAL_CAN_Transmit+0x29c>
      {

        if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d007      	beq.n	80007e0 <HAL_CAN_Transmit+0x25c>
 80007d0:	f7ff fcfc 	bl	80001cc <HAL_GetTick>
 80007d4:	4602      	mov	r2, r0
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1ad2      	subs	r2, r2, r3
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d91f      	bls.n	8000820 <HAL_CAN_Transmit+0x29c>
        {
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2203      	movs	r2, #3
 80007e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          /* Cancel transmission */
          __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d104      	bne.n	80007f8 <HAL_CAN_Transmit+0x274>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2280      	movs	r2, #128	; 0x80
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	e00d      	b.n	8000814 <HAL_CAN_Transmit+0x290>
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d105      	bne.n	800080a <HAL_CAN_Transmit+0x286>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	e004      	b.n	8000814 <HAL_CAN_Transmit+0x290>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000812:	609a      	str	r2, [r3, #8]

          /* Process unlocked */
          __HAL_UNLOCK(hcan);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          return HAL_TIMEOUT;
 800081c:	2303      	movs	r3, #3
 800081e:	e053      	b.n	80008c8 <HAL_CAN_Transmit+0x344>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d10b      	bne.n	800083e <HAL_CAN_Transmit+0x2ba>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	689a      	ldr	r2, [r3, #8]
 800082c:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <HAL_CAN_Transmit+0x34c>)
 800082e:	4013      	ands	r3, r2
 8000830:	4a27      	ldr	r2, [pc, #156]	; (80008d0 <HAL_CAN_Transmit+0x34c>)
 8000832:	4293      	cmp	r3, r2
 8000834:	bf14      	ite	ne
 8000836:	2301      	movne	r3, #1
 8000838:	2300      	moveq	r3, #0
 800083a:	b2db      	uxtb	r3, r3
 800083c:	e019      	b.n	8000872 <HAL_CAN_Transmit+0x2ee>
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10b      	bne.n	800085c <HAL_CAN_Transmit+0x2d8>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	689a      	ldr	r2, [r3, #8]
 800084a:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <HAL_CAN_Transmit+0x350>)
 800084c:	4013      	ands	r3, r2
 800084e:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <HAL_CAN_Transmit+0x350>)
 8000850:	4293      	cmp	r3, r2
 8000852:	bf14      	ite	ne
 8000854:	2301      	movne	r3, #1
 8000856:	2300      	moveq	r3, #0
 8000858:	b2db      	uxtb	r3, r3
 800085a:	e00a      	b.n	8000872 <HAL_CAN_Transmit+0x2ee>
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	689a      	ldr	r2, [r3, #8]
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <HAL_CAN_Transmit+0x354>)
 8000864:	4013      	ands	r3, r2
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <HAL_CAN_Transmit+0x354>)
 8000868:	4293      	cmp	r3, r2
 800086a:	bf14      	ite	ne
 800086c:	2301      	movne	r3, #1
 800086e:	2300      	moveq	r3, #0
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1a5      	bne.n	80007c2 <HAL_CAN_Transmit+0x23e>
        }
      }
    }
    /* Change CAN state */
    switch(hcan->State)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b52      	cmp	r3, #82	; 0x52
 8000880:	d008      	beq.n	8000894 <HAL_CAN_Transmit+0x310>
 8000882:	2b72      	cmp	r3, #114	; 0x72
 8000884:	d00b      	beq.n	800089e <HAL_CAN_Transmit+0x31a>
 8000886:	2b42      	cmp	r3, #66	; 0x42
 8000888:	d10e      	bne.n	80008a8 <HAL_CAN_Transmit+0x324>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2222      	movs	r2, #34	; 0x22
 800088e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          break;
 8000892:	e00e      	b.n	80008b2 <HAL_CAN_Transmit+0x32e>
      case(HAL_CAN_STATE_BUSY_TX_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2232      	movs	r2, #50	; 0x32
 8000898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          break;
 800089c:	e009      	b.n	80008b2 <HAL_CAN_Transmit+0x32e>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2262      	movs	r2, #98	; 0x62
 80008a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          break;
 80008a6:	e004      	b.n	80008b2 <HAL_CAN_Transmit+0x32e>
      default: /* HAL_CAN_STATE_BUSY_TX */
          hcan->State = HAL_CAN_STATE_READY;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2201      	movs	r2, #1
 80008ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          break;
 80008b0:	bf00      	nop
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Return function status */
    return HAL_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e004      	b.n	80008c8 <HAL_CAN_Transmit+0x344>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2204      	movs	r2, #4
 80008c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
  }
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	04000001 	.word	0x04000001
 80008d4:	08000100 	.word	0x08000100
 80008d8:	10010000 	.word	0x10010000

080008dc <HAL_CAN_Receive_IT>:
  *         the configuration information for the specified CAN.  
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcanR, uint8_t FIFONumber)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));
  
   //Check if CAN state is not busy for RX FIFO0
  if((FIFONumber == CAN_FIFO0) && ((hcanR->State == HAL_CAN_STATE_BUSY_RX0)||        \
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d119      	bne.n	8000922 <HAL_CAN_Receive_IT+0x46>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	2b22      	cmp	r3, #34	; 0x22
 80008f8:	d011      	beq.n	800091e <HAL_CAN_Receive_IT+0x42>
                                   (hcanR->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000900:	b2db      	uxtb	r3, r3
  if((FIFONumber == CAN_FIFO0) && ((hcanR->State == HAL_CAN_STATE_BUSY_RX0)||        \
 8000902:	2b42      	cmp	r3, #66	; 0x42
 8000904:	d00b      	beq.n	800091e <HAL_CAN_Receive_IT+0x42>
                                   (hcanR->State == HAL_CAN_STATE_BUSY_RX0_RX1)||     \
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800090c:	b2db      	uxtb	r3, r3
                                   (hcanR->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 800090e:	2b62      	cmp	r3, #98	; 0x62
 8000910:	d005      	beq.n	800091e <HAL_CAN_Receive_IT+0x42>
                                   (hcanR->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000918:	b2db      	uxtb	r3, r3
                                   (hcanR->State == HAL_CAN_STATE_BUSY_RX0_RX1)||     \
 800091a:	2b72      	cmp	r3, #114	; 0x72
 800091c:	d101      	bne.n	8000922 <HAL_CAN_Receive_IT+0x46>
  {
    return HAL_BUSY;
 800091e:	2302      	movs	r3, #2
 8000920:	e08d      	b.n	8000a3e <HAL_CAN_Receive_IT+0x162>
  }

  // Check if CAN state is not busy for RX FIFO1
  if((FIFONumber == CAN_FIFO1) && ((hcanR->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 8000922:	78fb      	ldrb	r3, [r7, #3]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d119      	bne.n	800095c <HAL_CAN_Receive_IT+0x80>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b32      	cmp	r3, #50	; 0x32
 8000932:	d011      	beq.n	8000958 <HAL_CAN_Receive_IT+0x7c>
                                   (hcanR->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800093a:	b2db      	uxtb	r3, r3
  if((FIFONumber == CAN_FIFO1) && ((hcanR->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 800093c:	2b52      	cmp	r3, #82	; 0x52
 800093e:	d00b      	beq.n	8000958 <HAL_CAN_Receive_IT+0x7c>
                                   (hcanR->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000946:	b2db      	uxtb	r3, r3
                                   (hcanR->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 8000948:	2b62      	cmp	r3, #98	; 0x62
 800094a:	d005      	beq.n	8000958 <HAL_CAN_Receive_IT+0x7c>
                                   (hcanR->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000952:	b2db      	uxtb	r3, r3
                                   (hcanR->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000954:	2b72      	cmp	r3, #114	; 0x72
 8000956:	d101      	bne.n	800095c <HAL_CAN_Receive_IT+0x80>
  {
    return HAL_BUSY;
 8000958:	2302      	movs	r3, #2
 800095a:	e070      	b.n	8000a3e <HAL_CAN_Receive_IT+0x162>
  }

  /* Process locked */
  __HAL_LOCK(hcanR);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000962:	2b01      	cmp	r3, #1
 8000964:	d101      	bne.n	800096a <HAL_CAN_Receive_IT+0x8e>
 8000966:	2302      	movs	r3, #2
 8000968:	e069      	b.n	8000a3e <HAL_CAN_Receive_IT+0x162>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2201      	movs	r2, #1
 800096e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Change CAN state */
  if(FIFONumber == CAN_FIFO0)
 8000972:	78fb      	ldrb	r3, [r7, #3]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d11e      	bne.n	80009b6 <HAL_CAN_Receive_IT+0xda>
  {
    switch(hcanR->State)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b32      	cmp	r3, #50	; 0x32
 8000982:	d008      	beq.n	8000996 <HAL_CAN_Receive_IT+0xba>
 8000984:	2b52      	cmp	r3, #82	; 0x52
 8000986:	d00b      	beq.n	80009a0 <HAL_CAN_Receive_IT+0xc4>
 8000988:	2b12      	cmp	r3, #18
 800098a:	d10e      	bne.n	80009aa <HAL_CAN_Receive_IT+0xce>
    {
      case(HAL_CAN_STATE_BUSY_TX):
		hcanR->State = HAL_CAN_STATE_BUSY_TX_RX0;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2242      	movs	r2, #66	; 0x42
 8000990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 8000994:	e02d      	b.n	80009f2 <HAL_CAN_Receive_IT+0x116>
      case(HAL_CAN_STATE_BUSY_RX1):
		hcanR->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2262      	movs	r2, #98	; 0x62
 800099a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 800099e:	e028      	b.n	80009f2 <HAL_CAN_Receive_IT+0x116>
      case(HAL_CAN_STATE_BUSY_TX_RX1):
		hcanR->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2272      	movs	r2, #114	; 0x72
 80009a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 80009a8:	e023      	b.n	80009f2 <HAL_CAN_Receive_IT+0x116>
      default: /* HAL_CAN_STATE_READY */
    	  hcanR->State = HAL_CAN_STATE_BUSY_RX0;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2222      	movs	r2, #34	; 0x22
 80009ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 80009b2:	bf00      	nop
 80009b4:	e01d      	b.n	80009f2 <HAL_CAN_Receive_IT+0x116>
    }
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    switch(hcanR->State)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b22      	cmp	r3, #34	; 0x22
 80009c0:	d008      	beq.n	80009d4 <HAL_CAN_Receive_IT+0xf8>
 80009c2:	2b42      	cmp	r3, #66	; 0x42
 80009c4:	d00b      	beq.n	80009de <HAL_CAN_Receive_IT+0x102>
 80009c6:	2b12      	cmp	r3, #18
 80009c8:	d10e      	bne.n	80009e8 <HAL_CAN_Receive_IT+0x10c>
    {
      case(HAL_CAN_STATE_BUSY_TX):
		hcanR->State = HAL_CAN_STATE_BUSY_TX_RX1;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2252      	movs	r2, #82	; 0x52
 80009ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 80009d2:	e00e      	b.n	80009f2 <HAL_CAN_Receive_IT+0x116>
      case(HAL_CAN_STATE_BUSY_RX0):
		hcanR->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2262      	movs	r2, #98	; 0x62
 80009d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 80009dc:	e009      	b.n	80009f2 <HAL_CAN_Receive_IT+0x116>
      case(HAL_CAN_STATE_BUSY_TX_RX0):
		hcanR->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2272      	movs	r2, #114	; 0x72
 80009e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 80009e6:	e004      	b.n	80009f2 <HAL_CAN_Receive_IT+0x116>
      default: /* HAL_CAN_STATE_READY */
    	  hcanR->State = HAL_CAN_STATE_BUSY_RX1;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2232      	movs	r2, #50	; 0x32
 80009ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 80009f0:	bf00      	nop
    }
  }
  /* Set CAN error code to none */
  hcanR->ErrorCode = HAL_CAN_ERROR_NONE;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	641a      	str	r2, [r3, #64]	; 0x40
  /*  - Enable Error passive Interrupt */
  /*  - Enable Bus-off Interrupt */
  /*  - Enable Last error code Interrupt */
  /*  - Enable Error Interrupt */
  /*  - Enable Transmit mailbox empty Interrupt */
  __HAL_CAN_ENABLE_IT(hcanR, CAN_IT_EWG |
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	f443 430f 	orr.w	r3, r3, #36608	; 0x8f00
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6153      	str	r3, [r2, #20]
                            CAN_IT_LEC |
                            CAN_IT_ERR |
                            CAN_IT_TME  );
  
   /* Process unlocked */
   __HAL_UNLOCK(hcanR);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if(FIFONumber == CAN_FIFO0)
 8000a14:	78fb      	ldrb	r3, [r7, #3]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d108      	bne.n	8000a2c <HAL_CAN_Receive_IT+0x150>
  {
    /* Enable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcanR, CAN_IT_FOV0 | CAN_IT_FMP0);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	6812      	ldr	r2, [r2, #0]
 8000a22:	6952      	ldr	r2, [r2, #20]
 8000a24:	f042 020a 	orr.w	r2, r2, #10
 8000a28:	615a      	str	r2, [r3, #20]
 8000a2a:	e007      	b.n	8000a3c <HAL_CAN_Receive_IT+0x160>
  }
  else
  {
    /* Enable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcanR, CAN_IT_FOV1 | CAN_IT_FMP1);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	6812      	ldr	r2, [r2, #0]
 8000a34:	6952      	ldr	r2, [r2, #20]
 8000a36:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8000a3a:	615a      	str	r2, [r3, #20]
  }

  /* Return function status */
  return HAL_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <HAL_CAN_IRQHandler>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]

  /* Check Overrun flag for FIFO0 */
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	f003 0310 	and.w	r3, r3, #16
 8000a6a:	2b10      	cmp	r3, #16
 8000a6c:	bf0c      	ite	eq
 8000a6e:	2301      	moveq	r3, #1
 8000a70:	2300      	movne	r3, #0
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	f003 0308 	and.w	r3, r3, #8
 8000a80:	2b08      	cmp	r3, #8
 8000a82:	bf0c      	ite	eq
 8000a84:	2301      	moveq	r3, #1
 8000a86:	2300      	movne	r3, #0
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	60fb      	str	r3, [r7, #12]
  if((tmp1 != 0U) && tmp2)
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d00a      	beq.n	8000aa8 <HAL_CAN_IRQHandler+0x60>
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d007      	beq.n	8000aa8 <HAL_CAN_IRQHandler+0x60>
  {
    /* Set CAN error code to FOV0 error */
    errorcode |= HAL_CAN_ERROR_FOV0;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9e:	617b      	str	r3, [r7, #20]

    /* Clear FIFO0 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2210      	movs	r2, #16
 8000aa6:	60da      	str	r2, [r3, #12]
  }

  /* Check Overrun flag for FIFO1 */
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	2b10      	cmp	r3, #16
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2301      	moveq	r3, #1
 8000ab8:	2300      	movne	r3, #0
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV1);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac8:	2b40      	cmp	r3, #64	; 0x40
 8000aca:	bf0c      	ite	eq
 8000acc:	2301      	moveq	r3, #1
 8000ace:	2300      	movne	r3, #0
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	60fb      	str	r3, [r7, #12]
  if((tmp1 != 0U) && tmp2)
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00a      	beq.n	8000af0 <HAL_CAN_IRQHandler+0xa8>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d007      	beq.n	8000af0 <HAL_CAN_IRQHandler+0xa8>
  {
    /* Set CAN error code to FOV1 error */
    errorcode |= HAL_CAN_ERROR_FOV1;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae6:	617b      	str	r3, [r7, #20]

    /* Clear FIFO1 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2210      	movs	r2, #16
 8000aee:	611a      	str	r2, [r3, #16]
  }

  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d16e      	bne.n	8000bdc <HAL_CAN_IRQHandler+0x194>
  {
    /* Check Transmit request completion status */
    tmp1 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	689a      	ldr	r2, [r3, #8]
 8000b04:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <HAL_CAN_IRQHandler+0x170>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	4a2b      	ldr	r2, [pc, #172]	; (8000bb8 <HAL_CAN_IRQHandler+0x170>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	bf0c      	ite	eq
 8000b0e:	2301      	moveq	r3, #1
 8000b10:	2300      	movne	r3, #0
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	613b      	str	r3, [r7, #16]
    tmp2 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	689a      	ldr	r2, [r3, #8]
 8000b1c:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <HAL_CAN_IRQHandler+0x174>)
 8000b1e:	4013      	ands	r3, r2
 8000b20:	4a26      	ldr	r2, [pc, #152]	; (8000bbc <HAL_CAN_IRQHandler+0x174>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	bf0c      	ite	eq
 8000b26:	2301      	moveq	r3, #1
 8000b28:	2300      	movne	r3, #0
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	60fb      	str	r3, [r7, #12]
    tmp3 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	689a      	ldr	r2, [r3, #8]
 8000b34:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <HAL_CAN_IRQHandler+0x178>)
 8000b36:	4013      	ands	r3, r2
 8000b38:	4a21      	ldr	r2, [pc, #132]	; (8000bc0 <HAL_CAN_IRQHandler+0x178>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	bf0c      	ite	eq
 8000b3e:	2301      	moveq	r3, #1
 8000b40:	2300      	movne	r3, #0
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	60bb      	str	r3, [r7, #8]
    if(tmp1 || tmp2 || tmp3)  
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d105      	bne.n	8000b58 <HAL_CAN_IRQHandler+0x110>
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d102      	bne.n	8000b58 <HAL_CAN_IRQHandler+0x110>
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d041      	beq.n	8000bdc <HAL_CAN_IRQHandler+0x194>
    {
      tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	bf0c      	ite	eq
 8000b66:	2301      	moveq	r3, #1
 8000b68:	2300      	movne	r3, #0
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	613b      	str	r3, [r7, #16]
      tmp2 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b7c:	bf0c      	ite	eq
 8000b7e:	2301      	moveq	r3, #1
 8000b80:	2300      	movne	r3, #0
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	60fb      	str	r3, [r7, #12]
      tmp3 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK2);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	bf0c      	ite	eq
 8000b94:	2301      	moveq	r3, #1
 8000b96:	2300      	movne	r3, #0
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	60bb      	str	r3, [r7, #8]
      /* Check Transmit success */
      if((tmp1) || (tmp2) || (tmp3))
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d105      	bne.n	8000bae <HAL_CAN_IRQHandler+0x166>
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <HAL_CAN_IRQHandler+0x166>
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d00a      	beq.n	8000bc4 <HAL_CAN_IRQHandler+0x17c>
      {
        /* Call transmit function */
        CAN_Transmit_IT(hcan);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f000 f997 	bl	8000ee2 <CAN_Transmit_IT>
 8000bb4:	e00a      	b.n	8000bcc <HAL_CAN_IRQHandler+0x184>
 8000bb6:	bf00      	nop
 8000bb8:	04000001 	.word	0x04000001
 8000bbc:	08000100 	.word	0x08000100
 8000bc0:	10010000 	.word	0x10010000
      }
      else /* Transmit failure */
      {
        /* Set CAN error code to TXFAIL error */
        errorcode |= HAL_CAN_ERROR_TXFAIL;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bca:	617b      	str	r3, [r7, #20]
      }

      /* Clear transmission status flags (RQCPx and TXOKx) */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_RQCP0  | CAN_TSR_RQCP1  | CAN_TSR_RQCP2 | \
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6899      	ldr	r1, [r3, #8]
 8000bd6:	4b97      	ldr	r3, [pc, #604]	; (8000e34 <HAL_CAN_IRQHandler+0x3ec>)
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	6093      	str	r3, [r2, #8]
                                   CAN_FLAG_TXOK0 | CAN_FLAG_TXOK1 | CAN_FLAG_TXOK2);
    }
  }
  
  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	f003 0302 	and.w	r3, r3, #2
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	bf0c      	ite	eq
 8000bf8:	2301      	moveq	r3, #1
 8000bfa:	2300      	movne	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	60fb      	str	r3, [r7, #12]
  /* Check End of reception flag for FIFO0 */
  if((tmp1 != 0U) && tmp2)
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d006      	beq.n	8000c14 <HAL_CAN_IRQHandler+0x1cc>
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d003      	beq.n	8000c14 <HAL_CAN_IRQHandler+0x1cc>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 f9a7 	bl	8000f62 <CAN_Receive_IT>
  }
  
  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	f003 0310 	and.w	r3, r3, #16
 8000c2c:	2b10      	cmp	r3, #16
 8000c2e:	bf0c      	ite	eq
 8000c30:	2301      	moveq	r3, #1
 8000c32:	2300      	movne	r3, #0
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	60fb      	str	r3, [r7, #12]
  /* Check End of reception flag for FIFO1 */
  if((tmp1 != 0U) && tmp2)
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d006      	beq.n	8000c4c <HAL_CAN_IRQHandler+0x204>
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d003      	beq.n	8000c4c <HAL_CAN_IRQHandler+0x204>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
 8000c44:	2101      	movs	r1, #1
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 f98b 	bl	8000f62 <CAN_Receive_IT>
  }

  /* Set error code in handle */
  hcan->ErrorCode |= errorcode;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	431a      	orrs	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	641a      	str	r2, [r3, #64]	; 0x40

  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	bf0c      	ite	eq
 8000c66:	2301      	moveq	r3, #1
 8000c68:	2300      	movne	r3, #0
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c7c:	bf0c      	ite	eq
 8000c7e:	2301      	moveq	r3, #1
 8000c80:	2300      	movne	r3, #0
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	60fb      	str	r3, [r7, #12]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c94:	bf0c      	ite	eq
 8000c96:	2301      	moveq	r3, #1
 8000c98:	2300      	movne	r3, #0
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	60bb      	str	r3, [r7, #8]
  /* Check Error Warning Flag */
  if(tmp1 && tmp2 && tmp3)
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d00b      	beq.n	8000cbc <HAL_CAN_IRQHandler+0x274>
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d008      	beq.n	8000cbc <HAL_CAN_IRQHandler+0x274>
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d005      	beq.n	8000cbc <HAL_CAN_IRQHandler+0x274>
  {
    /* Set CAN error code to EWG error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	f043 0201 	orr.w	r2, r3, #1
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	641a      	str	r2, [r3, #64]	; 0x40
    /* No need for clear of Error Warning Flag as read-only */
  }
  
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	bf0c      	ite	eq
 8000cca:	2301      	moveq	r3, #1
 8000ccc:	2300      	movne	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ce0:	bf0c      	ite	eq
 8000ce2:	2301      	moveq	r3, #1
 8000ce4:	2300      	movne	r3, #0
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	60fb      	str	r3, [r7, #12]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR); 
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cf8:	bf0c      	ite	eq
 8000cfa:	2301      	moveq	r3, #1
 8000cfc:	2300      	movne	r3, #0
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	60bb      	str	r3, [r7, #8]
  /* Check Error Passive Flag */
  if(tmp1 && tmp2 && tmp3)
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d00b      	beq.n	8000d20 <HAL_CAN_IRQHandler+0x2d8>
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d008      	beq.n	8000d20 <HAL_CAN_IRQHandler+0x2d8>
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d005      	beq.n	8000d20 <HAL_CAN_IRQHandler+0x2d8>
  {
    /* Set CAN error code to EPV error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	f043 0202 	orr.w	r2, r3, #2
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	641a      	str	r2, [r3, #64]	; 0x40
    /* No need for clear of Error Passive Flag as read-only */ 
  }
  
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf0c      	ite	eq
 8000d2e:	2301      	moveq	r3, #1
 8000d30:	2300      	movne	r3, #0
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	695b      	ldr	r3, [r3, #20]
 8000d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d44:	bf0c      	ite	eq
 8000d46:	2301      	moveq	r3, #1
 8000d48:	2300      	movne	r3, #0
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	60fb      	str	r3, [r7, #12]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);  
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d5c:	bf0c      	ite	eq
 8000d5e:	2301      	moveq	r3, #1
 8000d60:	2300      	movne	r3, #0
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	60bb      	str	r3, [r7, #8]
  /* Check Bus-Off Flag */
  if(tmp1 && tmp2 && tmp3)
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d00b      	beq.n	8000d84 <HAL_CAN_IRQHandler+0x33c>
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d008      	beq.n	8000d84 <HAL_CAN_IRQHandler+0x33c>
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d005      	beq.n	8000d84 <HAL_CAN_IRQHandler+0x33c>
  {
    /* Set CAN error code to BOF error */
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	f043 0204 	orr.w	r2, r3, #4
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	641a      	str	r2, [r3, #64]	; 0x40
    /* No need for clear of Bus-Off Flag as read-only */
  }
  
  tmp1 = HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	bf0c      	ite	eq
 8000d92:	2301      	moveq	r3, #1
 8000d94:	2300      	movne	r3, #0
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000da8:	bf0c      	ite	eq
 8000daa:	2301      	moveq	r3, #1
 8000dac:	2300      	movne	r3, #0
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	60fb      	str	r3, [r7, #12]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dc0:	bf0c      	ite	eq
 8000dc2:	2301      	moveq	r3, #1
 8000dc4:	2300      	movne	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	60bb      	str	r3, [r7, #8]
  /* Check Last error code Flag */
  if((!tmp1) && tmp2 && tmp3)
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d150      	bne.n	8000e72 <HAL_CAN_IRQHandler+0x42a>
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d04d      	beq.n	8000e72 <HAL_CAN_IRQHandler+0x42a>
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d04a      	beq.n	8000e72 <HAL_CAN_IRQHandler+0x42a>
  {
    tmp1 = (hcan->Instance->ESR & CAN_ESR_LEC);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000de6:	613b      	str	r3, [r7, #16]
    switch(tmp1)
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	2b30      	cmp	r3, #48	; 0x30
 8000dec:	d01b      	beq.n	8000e26 <HAL_CAN_IRQHandler+0x3de>
 8000dee:	2b30      	cmp	r3, #48	; 0x30
 8000df0:	d804      	bhi.n	8000dfc <HAL_CAN_IRQHandler+0x3b4>
 8000df2:	2b10      	cmp	r3, #16
 8000df4:	d009      	beq.n	8000e0a <HAL_CAN_IRQHandler+0x3c2>
 8000df6:	2b20      	cmp	r3, #32
 8000df8:	d00e      	beq.n	8000e18 <HAL_CAN_IRQHandler+0x3d0>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
          break;
      default:
          break;
 8000dfa:	e032      	b.n	8000e62 <HAL_CAN_IRQHandler+0x41a>
    switch(tmp1)
 8000dfc:	2b50      	cmp	r3, #80	; 0x50
 8000dfe:	d022      	beq.n	8000e46 <HAL_CAN_IRQHandler+0x3fe>
 8000e00:	2b60      	cmp	r3, #96	; 0x60
 8000e02:	d027      	beq.n	8000e54 <HAL_CAN_IRQHandler+0x40c>
 8000e04:	2b40      	cmp	r3, #64	; 0x40
 8000e06:	d017      	beq.n	8000e38 <HAL_CAN_IRQHandler+0x3f0>
          break;
 8000e08:	e02b      	b.n	8000e62 <HAL_CAN_IRQHandler+0x41a>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f043 0208 	orr.w	r2, r3, #8
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8000e16:	e024      	b.n	8000e62 <HAL_CAN_IRQHandler+0x41a>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	f043 0210 	orr.w	r2, r3, #16
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8000e24:	e01d      	b.n	8000e62 <HAL_CAN_IRQHandler+0x41a>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f043 0220 	orr.w	r2, r3, #32
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8000e32:	e016      	b.n	8000e62 <HAL_CAN_IRQHandler+0x41a>
 8000e34:	00010509 	.word	0x00010509
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8000e44:	e00d      	b.n	8000e62 <HAL_CAN_IRQHandler+0x41a>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8000e52:	e006      	b.n	8000e62 <HAL_CAN_IRQHandler+0x41a>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8000e60:	bf00      	nop
    }

    /* Clear Last error code Flag */ 
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	6812      	ldr	r2, [r2, #0]
 8000e6a:	6992      	ldr	r2, [r2, #24]
 8000e6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e70:	619a      	str	r2, [r3, #24]
  }

  /* Call the Error call Back in case of Errors */
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d014      	beq.n	8000ea4 <HAL_CAN_IRQHandler+0x45c>
  {
    /* Clear ERRI Flag */ 
    hcan->Instance->MSR = CAN_MSR_ERRI; 
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2204      	movs	r2, #4
 8000e80:	605a      	str	r2, [r3, #4]
    /* Set the CAN state ready to be able to start again the process */
    hcan->State = HAL_CAN_STATE_READY;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2201      	movs	r2, #1
 8000e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /*  - Disable FIFO 0 message pending Interrupt */
    /*  - Disable FIFO 0 Overrun Interrupt */
    /*  - Disable FIFO 1 message pending Interrupt */
    /*  - Disable FIFO 1 Overrun Interrupt */
    /*  - Disable Transmit mailbox empty Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	f423 430f 	bic.w	r3, r3, #36608	; 0x8f00
 8000e98:	f023 035b 	bic.w	r3, r3, #91	; 0x5b
 8000e9c:	6153      	str	r3, [r2, #20]
                               CAN_IT_FMP1|
                               CAN_IT_FOV1|
                               CAN_IT_TME  );

    /* Call Error callback function */
    HAL_CAN_ErrorCallback(hcan);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f816 	bl	8000ed0 <HAL_CAN_ErrorCallback>
  }  
}
 8000ea4:	bf00      	nop
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_CAN_TxCpltCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxCpltCallback(CAN_HandleTypeDef* hcan)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxCpltCallback can be implemented in the user file
   */
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr

08000ebe <HAL_CAN_RxCpltCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* hcan)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxCpltCallback can be implemented in the user file
   */
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <HAL_CAN_ErrorCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback can be implemented in the user file
   */
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr

08000ee2 <CAN_Transmit_IT>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  /* Disable Transmit mailbox empty Interrupt */
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	6812      	ldr	r2, [r2, #0]
 8000ef2:	6952      	ldr	r2, [r2, #20]
 8000ef4:	f022 0201 	bic.w	r2, r2, #1
 8000ef8:	615a      	str	r2, [r3, #20]
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b12      	cmp	r3, #18
 8000f04:	d107      	bne.n	8000f16 <CAN_Transmit_IT+0x34>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	6812      	ldr	r2, [r2, #0]
 8000f0e:	6952      	ldr	r2, [r2, #20]
 8000f10:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8000f14:	615a      	str	r2, [r3, #20]
                               CAN_IT_LEC |
                               CAN_IT_ERR);
  }

  /* Change CAN state */
  switch(hcan->State)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b52      	cmp	r3, #82	; 0x52
 8000f20:	d008      	beq.n	8000f34 <CAN_Transmit_IT+0x52>
 8000f22:	2b72      	cmp	r3, #114	; 0x72
 8000f24:	d00b      	beq.n	8000f3e <CAN_Transmit_IT+0x5c>
 8000f26:	2b42      	cmp	r3, #66	; 0x42
 8000f28:	d10e      	bne.n	8000f48 <CAN_Transmit_IT+0x66>
  {
    case(HAL_CAN_STATE_BUSY_TX_RX0):
      hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2222      	movs	r2, #34	; 0x22
 8000f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      break;
 8000f32:	e00e      	b.n	8000f52 <CAN_Transmit_IT+0x70>
    case(HAL_CAN_STATE_BUSY_TX_RX1):
      hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2232      	movs	r2, #50	; 0x32
 8000f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      break;
 8000f3c:	e009      	b.n	8000f52 <CAN_Transmit_IT+0x70>
    case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
      hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2262      	movs	r2, #98	; 0x62
 8000f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      break;
 8000f46:	e004      	b.n	8000f52 <CAN_Transmit_IT+0x70>
    default: /* HAL_CAN_STATE_BUSY_TX */
      hcan->State = HAL_CAN_STATE_READY;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      break;
 8000f50:	bf00      	nop
  }

  /* Transmission complete callback */ 
  HAL_CAN_TxCpltCallback(hcan);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffaa 	bl	8000eac <HAL_CAN_TxCpltCallback>
  
  return HAL_OK;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp1 = 0U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
  CanRxMsgTypeDef* pRxMsg = NULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Set RxMsg pointer */
  if(FIFONumber == CAN_FIFO0)
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d103      	bne.n	8000f84 <CAN_Receive_IT+0x22>
  {
    pRxMsg = hcan->pRxMsg;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	e002      	b.n	8000f8a <CAN_Receive_IT+0x28>
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    pRxMsg = hcan->pRx1Msg;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  /* Get the Id */
  pRxMsg->IDE = (uint8_t)0x04U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	78fb      	ldrb	r3, [r7, #3]
 8000f90:	331b      	adds	r3, #27
 8000f92:	011b      	lsls	r3, r3, #4
 8000f94:	4413      	add	r3, r2
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0204 	and.w	r2, r3, #4
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	609a      	str	r2, [r3, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10c      	bne.n	8000fc2 <CAN_Receive_IT+0x60>
  {
    pRxMsg->StdId = 0x000007FFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21U);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	78fb      	ldrb	r3, [r7, #3]
 8000fae:	331b      	adds	r3, #27
 8000fb0:	011b      	lsls	r3, r3, #4
 8000fb2:	4413      	add	r3, r2
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	0d5b      	lsrs	r3, r3, #21
 8000fb8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	e00b      	b.n	8000fda <CAN_Receive_IT+0x78>
  }
  else
  {
    pRxMsg->ExtId = 0x1FFFFFFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3U);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	78fb      	ldrb	r3, [r7, #3]
 8000fc8:	331b      	adds	r3, #27
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	4413      	add	r3, r2
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	605a      	str	r2, [r3, #4]
  }
  
  pRxMsg->RTR = (uint8_t)0x02U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	331b      	adds	r3, #27
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	4413      	add	r3, r2
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0202 	and.w	r2, r3, #2
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	60da      	str	r2, [r3, #12]
  /* Get the DLC */
  pRxMsg->DLC = (uint8_t)0x0FU & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	78fb      	ldrb	r3, [r7, #3]
 8000ff6:	331b      	adds	r3, #27
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 020f 	and.w	r2, r3, #15
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	611a      	str	r2, [r3, #16]
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
 8001008:	78fa      	ldrb	r2, [r7, #3]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	621a      	str	r2, [r3, #32]
  /* Get the FMI */
  pRxMsg->FMI = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8U);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	78fb      	ldrb	r3, [r7, #3]
 8001014:	331b      	adds	r3, #27
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	4413      	add	r3, r2
 800101a:	3304      	adds	r3, #4
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	b2da      	uxtb	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	61da      	str	r2, [r3, #28]
  /* Get the data field */
  pRxMsg->Data[0] = (uint8_t)0xFFU & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	78fb      	ldrb	r3, [r7, #3]
 800102c:	011b      	lsls	r3, r3, #4
 800102e:	4413      	add	r3, r2
 8001030:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	751a      	strb	r2, [r3, #20]
  pRxMsg->Data[1] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8U);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	78fb      	ldrb	r3, [r7, #3]
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	4413      	add	r3, r2
 8001046:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	b2da      	uxtb	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	755a      	strb	r2, [r3, #21]
  pRxMsg->Data[2] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16U);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	4413      	add	r3, r2
 800105e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	0c1b      	lsrs	r3, r3, #16
 8001066:	b2da      	uxtb	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	759a      	strb	r2, [r3, #22]
  pRxMsg->Data[3] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24U);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	4413      	add	r3, r2
 8001076:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	0e1b      	lsrs	r3, r3, #24
 800107e:	b2da      	uxtb	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	75da      	strb	r2, [r3, #23]
  pRxMsg->Data[4] = (uint8_t)0xFFU & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	4413      	add	r3, r2
 800108e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	761a      	strb	r2, [r3, #24]
  pRxMsg->Data[5] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8U);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	4413      	add	r3, r2
 80010a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	0a1b      	lsrs	r3, r3, #8
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	765a      	strb	r2, [r3, #25]
  pRxMsg->Data[6] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16U);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	78fb      	ldrb	r3, [r7, #3]
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	4413      	add	r3, r2
 80010bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	0c1b      	lsrs	r3, r3, #16
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	769a      	strb	r2, [r3, #26]
  pRxMsg->Data[7] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24U);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	4413      	add	r3, r2
 80010d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	0e1b      	lsrs	r3, r3, #24
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	76da      	strb	r2, [r3, #27]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d10c      	bne.n	8001102 <CAN_Receive_IT+0x1a0>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2220      	movs	r2, #32
 80010ee:	60da      	str	r2, [r3, #12]
    
    /* Disable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	6952      	ldr	r2, [r2, #20]
 80010fa:	f022 020a 	bic.w	r2, r2, #10
 80010fe:	615a      	str	r2, [r3, #20]
 8001100:	e00b      	b.n	800111a <CAN_Receive_IT+0x1b8>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2220      	movs	r2, #32
 8001108:	611a      	str	r2, [r3, #16]
    
    /* Disable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	6952      	ldr	r2, [r2, #20]
 8001114:	f022 0250 	bic.w	r2, r2, #80	; 0x50
 8001118:	615a      	str	r2, [r3, #20]
  }

  tmp1 = hcan->State;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001120:	b2db      	uxtb	r3, r3
 8001122:	60bb      	str	r3, [r7, #8]
  if((tmp1 == HAL_CAN_STATE_BUSY_RX0) || (tmp1 == HAL_CAN_STATE_BUSY_RX1))
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	2b22      	cmp	r3, #34	; 0x22
 8001128:	d002      	beq.n	8001130 <CAN_Receive_IT+0x1ce>
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	2b32      	cmp	r3, #50	; 0x32
 800112e:	d107      	bne.n	8001140 <CAN_Receive_IT+0x1de>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	6952      	ldr	r2, [r2, #20]
 800113a:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 800113e:	615a      	str	r2, [r3, #20]
                               CAN_IT_LEC |
                               CAN_IT_ERR);
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d11e      	bne.n	8001184 <CAN_Receive_IT+0x222>
  {
    switch(hcan->State)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b62      	cmp	r3, #98	; 0x62
 8001150:	d008      	beq.n	8001164 <CAN_Receive_IT+0x202>
 8001152:	2b72      	cmp	r3, #114	; 0x72
 8001154:	d00b      	beq.n	800116e <CAN_Receive_IT+0x20c>
 8001156:	2b42      	cmp	r3, #66	; 0x42
 8001158:	d10e      	bne.n	8001178 <CAN_Receive_IT+0x216>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2212      	movs	r2, #18
 800115e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 8001162:	e02d      	b.n	80011c0 <CAN_Receive_IT+0x25e>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2232      	movs	r2, #50	; 0x32
 8001168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 800116c:	e028      	b.n	80011c0 <CAN_Receive_IT+0x25e>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2252      	movs	r2, #82	; 0x52
 8001172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 8001176:	e023      	b.n	80011c0 <CAN_Receive_IT+0x25e>
      default: /* HAL_CAN_STATE_BUSY_RX0 */
        hcan->State = HAL_CAN_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 8001180:	bf00      	nop
 8001182:	e01d      	b.n	80011c0 <CAN_Receive_IT+0x25e>
    }
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    switch(hcan->State)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b62      	cmp	r3, #98	; 0x62
 800118e:	d008      	beq.n	80011a2 <CAN_Receive_IT+0x240>
 8001190:	2b72      	cmp	r3, #114	; 0x72
 8001192:	d00b      	beq.n	80011ac <CAN_Receive_IT+0x24a>
 8001194:	2b52      	cmp	r3, #82	; 0x52
 8001196:	d10e      	bne.n	80011b6 <CAN_Receive_IT+0x254>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2212      	movs	r2, #18
 800119c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 80011a0:	e00e      	b.n	80011c0 <CAN_Receive_IT+0x25e>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2222      	movs	r2, #34	; 0x22
 80011a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 80011aa:	e009      	b.n	80011c0 <CAN_Receive_IT+0x25e>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2242      	movs	r2, #66	; 0x42
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 80011b4:	e004      	b.n	80011c0 <CAN_Receive_IT+0x25e>
      default: /* HAL_CAN_STATE_BUSY_RX1 */
        hcan->State = HAL_CAN_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 80011be:	bf00      	nop
    }
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff fe7c 	bl	8000ebe <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <NVIC_SetPriorityGrouping+0x44>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <NVIC_SetPriorityGrouping+0x44>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <NVIC_EnableIRQ+0x2c>)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	095b      	lsrs	r3, r3, #5
 8001246:	79fa      	ldrb	r2, [r7, #7]
 8001248:	f002 021f 	and.w	r2, r2, #31
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f202 	lsl.w	r2, r0, r2
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	e000e100 	.word	0xe000e100

08001264 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	da0b      	bge.n	8001290 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	490d      	ldr	r1, [pc, #52]	; (80012b0 <NVIC_SetPriority+0x4c>)
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	3b04      	subs	r3, #4
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800128e:	e009      	b.n	80012a4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001290:	4908      	ldr	r1, [pc, #32]	; (80012b4 <NVIC_SetPriority+0x50>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	440b      	add	r3, r1
 80012a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f1c3 0307 	rsb	r3, r3, #7
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	bf28      	it	cs
 80012d6:	2304      	movcs	r3, #4
 80012d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d902      	bls.n	80012e8 <NVIC_EncodePriority+0x30>
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3b03      	subs	r3, #3
 80012e6:	e000      	b.n	80012ea <NVIC_EncodePriority+0x32>
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	2201      	movs	r2, #1
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	1e5a      	subs	r2, r3, #1
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	401a      	ands	r2, r3
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fe:	2101      	movs	r1, #1
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	1e59      	subs	r1, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
         );
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001328:	d301      	bcc.n	800132e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132a:	2301      	movs	r3, #1
 800132c:	e00f      	b.n	800134e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <SysTick_Config+0x40>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001336:	210f      	movs	r1, #15
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f7ff ff92 	bl	8001264 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <SysTick_Config+0x40>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <SysTick_Config+0x40>)
 8001348:	2207      	movs	r2, #7
 800134a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	e000e010 	.word	0xe000e010

0800135c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff33 	bl	80011d0 <NVIC_SetPriorityGrouping>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001372:	b580      	push	{r7, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001384:	f7ff ff48 	bl	8001218 <NVIC_GetPriorityGrouping>
 8001388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	6978      	ldr	r0, [r7, #20]
 8001390:	f7ff ff92 	bl	80012b8 <NVIC_EncodePriority>
 8001394:	4602      	mov	r2, r0
 8001396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff61 	bl	8001264 <NVIC_SetPriority>
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff3b 	bl	8001234 <NVIC_EnableIRQ>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ffa2 	bl	8001318 <SysTick_Config>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d106      	bne.n	80013fc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013ee:	4a09      	ldr	r2, [pc, #36]	; (8001414 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80013fa:	e005      	b.n	8001408 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80013fc:	4a05      	ldr	r2, [pc, #20]	; (8001414 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 0304 	bic.w	r3, r3, #4
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e010 	.word	0xe000e010

08001418 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800141c:	f000 f802 	bl	8001424 <HAL_SYSTICK_Callback>
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b08b      	sub	sp, #44	; 0x2c
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
 8001452:	e121      	b.n	8001698 <HAL_GPIO_Init+0x268>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8001454:	2201      	movs	r2, #1
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	429a      	cmp	r2, r3
 800146e:	f040 8110 	bne.w	8001692 <HAL_GPIO_Init+0x262>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b12      	cmp	r3, #18
 8001478:	d034      	beq.n	80014e4 <HAL_GPIO_Init+0xb4>
 800147a:	2b12      	cmp	r3, #18
 800147c:	d80d      	bhi.n	800149a <HAL_GPIO_Init+0x6a>
 800147e:	2b02      	cmp	r3, #2
 8001480:	d02b      	beq.n	80014da <HAL_GPIO_Init+0xaa>
 8001482:	2b02      	cmp	r3, #2
 8001484:	d804      	bhi.n	8001490 <HAL_GPIO_Init+0x60>
 8001486:	2b00      	cmp	r3, #0
 8001488:	d031      	beq.n	80014ee <HAL_GPIO_Init+0xbe>
 800148a:	2b01      	cmp	r3, #1
 800148c:	d01c      	beq.n	80014c8 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 800148e:	e048      	b.n	8001522 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001490:	2b03      	cmp	r3, #3
 8001492:	d043      	beq.n	800151c <HAL_GPIO_Init+0xec>
 8001494:	2b11      	cmp	r3, #17
 8001496:	d01b      	beq.n	80014d0 <HAL_GPIO_Init+0xa0>
          break;
 8001498:	e043      	b.n	8001522 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800149a:	4a84      	ldr	r2, [pc, #528]	; (80016ac <HAL_GPIO_Init+0x27c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d026      	beq.n	80014ee <HAL_GPIO_Init+0xbe>
 80014a0:	4a82      	ldr	r2, [pc, #520]	; (80016ac <HAL_GPIO_Init+0x27c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d806      	bhi.n	80014b4 <HAL_GPIO_Init+0x84>
 80014a6:	4a82      	ldr	r2, [pc, #520]	; (80016b0 <HAL_GPIO_Init+0x280>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d020      	beq.n	80014ee <HAL_GPIO_Init+0xbe>
 80014ac:	4a81      	ldr	r2, [pc, #516]	; (80016b4 <HAL_GPIO_Init+0x284>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d01d      	beq.n	80014ee <HAL_GPIO_Init+0xbe>
          break;
 80014b2:	e036      	b.n	8001522 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80014b4:	4a80      	ldr	r2, [pc, #512]	; (80016b8 <HAL_GPIO_Init+0x288>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d019      	beq.n	80014ee <HAL_GPIO_Init+0xbe>
 80014ba:	4a80      	ldr	r2, [pc, #512]	; (80016bc <HAL_GPIO_Init+0x28c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d016      	beq.n	80014ee <HAL_GPIO_Init+0xbe>
 80014c0:	4a7f      	ldr	r2, [pc, #508]	; (80016c0 <HAL_GPIO_Init+0x290>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d013      	beq.n	80014ee <HAL_GPIO_Init+0xbe>
          break;
 80014c6:	e02c      	b.n	8001522 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	623b      	str	r3, [r7, #32]
          break;
 80014ce:	e028      	b.n	8001522 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	3304      	adds	r3, #4
 80014d6:	623b      	str	r3, [r7, #32]
          break;
 80014d8:	e023      	b.n	8001522 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	3308      	adds	r3, #8
 80014e0:	623b      	str	r3, [r7, #32]
          break;
 80014e2:	e01e      	b.n	8001522 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	330c      	adds	r3, #12
 80014ea:	623b      	str	r3, [r7, #32]
          break;
 80014ec:	e019      	b.n	8001522 <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014f6:	2304      	movs	r3, #4
 80014f8:	623b      	str	r3, [r7, #32]
          break; 
 80014fa:	e012      	b.n	8001522 <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d105      	bne.n	8001510 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001504:	2308      	movs	r3, #8
 8001506:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	611a      	str	r2, [r3, #16]
          break; 
 800150e:	e008      	b.n	8001522 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001510:	2308      	movs	r3, #8
 8001512:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	615a      	str	r2, [r3, #20]
          break; 
 800151a:	e002      	b.n	8001522 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
          break;
 8001520:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	2bff      	cmp	r3, #255	; 0xff
 8001526:	d801      	bhi.n	800152c <HAL_GPIO_Init+0xfc>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	e001      	b.n	8001530 <HAL_GPIO_Init+0x100>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3304      	adds	r3, #4
 8001530:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	2bff      	cmp	r3, #255	; 0xff
 8001536:	d802      	bhi.n	800153e <HAL_GPIO_Init+0x10e>
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	e002      	b.n	8001544 <HAL_GPIO_Init+0x114>
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	3b08      	subs	r3, #8
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	210f      	movs	r1, #15
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	401a      	ands	r2, r3
 8001556:	6a39      	ldr	r1, [r7, #32]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	431a      	orrs	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 8090 	beq.w	8001692 <HAL_GPIO_Init+0x262>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001572:	4a54      	ldr	r2, [pc, #336]	; (80016c4 <HAL_GPIO_Init+0x294>)
 8001574:	4b53      	ldr	r3, [pc, #332]	; (80016c4 <HAL_GPIO_Init+0x294>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6193      	str	r3, [r2, #24]
 800157e:	4b51      	ldr	r3, [pc, #324]	; (80016c4 <HAL_GPIO_Init+0x294>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800158a:	4a4f      	ldr	r2, [pc, #316]	; (80016c8 <HAL_GPIO_Init+0x298>)
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	4013      	ands	r3, r2
 80015ac:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a46      	ldr	r2, [pc, #280]	; (80016cc <HAL_GPIO_Init+0x29c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00d      	beq.n	80015d2 <HAL_GPIO_Init+0x1a2>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a45      	ldr	r2, [pc, #276]	; (80016d0 <HAL_GPIO_Init+0x2a0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d007      	beq.n	80015ce <HAL_GPIO_Init+0x19e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a44      	ldr	r2, [pc, #272]	; (80016d4 <HAL_GPIO_Init+0x2a4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_GPIO_Init+0x19a>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e004      	b.n	80015d4 <HAL_GPIO_Init+0x1a4>
 80015ca:	2303      	movs	r3, #3
 80015cc:	e002      	b.n	80015d4 <HAL_GPIO_Init+0x1a4>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x1a4>
 80015d2:	2300      	movs	r3, #0
 80015d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d6:	f002 0203 	and.w	r2, r2, #3
 80015da:	0092      	lsls	r2, r2, #2
 80015dc:	4093      	lsls	r3, r2
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80015e4:	4938      	ldr	r1, [pc, #224]	; (80016c8 <HAL_GPIO_Init+0x298>)
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80015fe:	4936      	ldr	r1, [pc, #216]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 8001600:	4b35      	ldr	r3, [pc, #212]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
 800160a:	e006      	b.n	800161a <HAL_GPIO_Init+0x1ea>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800160c:	4932      	ldr	r1, [pc, #200]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 800160e:	4b32      	ldr	r3, [pc, #200]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	43db      	mvns	r3, r3
 8001616:	4013      	ands	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <HAL_GPIO_Init+0x204>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8001626:	492c      	ldr	r1, [pc, #176]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	604b      	str	r3, [r1, #4]
 8001632:	e006      	b.n	8001642 <HAL_GPIO_Init+0x212>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8001634:	4928      	ldr	r1, [pc, #160]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 8001636:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	43db      	mvns	r3, r3
 800163e:	4013      	ands	r3, r2
 8001640:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d006      	beq.n	800165c <HAL_GPIO_Init+0x22c>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800164e:	4922      	ldr	r1, [pc, #136]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]
 800165a:	e006      	b.n	800166a <HAL_GPIO_Init+0x23a>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 800165c:	491e      	ldr	r1, [pc, #120]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	43db      	mvns	r3, r3
 8001666:	4013      	ands	r3, r2
 8001668:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <HAL_GPIO_Init+0x254>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001676:	4918      	ldr	r1, [pc, #96]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	60cb      	str	r3, [r1, #12]
 8001682:	e006      	b.n	8001692 <HAL_GPIO_Init+0x262>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8001684:	4914      	ldr	r1, [pc, #80]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	43db      	mvns	r3, r3
 800168e:	4013      	ands	r3, r2
 8001690:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	3301      	adds	r3, #1
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	2b0f      	cmp	r3, #15
 800169c:	f67f aeda 	bls.w	8001454 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80016a0:	bf00      	nop
 80016a2:	372c      	adds	r7, #44	; 0x2c
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	10210000 	.word	0x10210000
 80016b0:	10110000 	.word	0x10110000
 80016b4:	10120000 	.word	0x10120000
 80016b8:	10310000 	.word	0x10310000
 80016bc:	10320000 	.word	0x10320000
 80016c0:	10220000 	.word	0x10220000
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40010000 	.word	0x40010000
 80016cc:	40010800 	.word	0x40010800
 80016d0:	40010c00 	.word	0x40010c00
 80016d4:	40011000 	.word	0x40011000
 80016d8:	40010400 	.word	0x40010400

080016dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	887b      	ldrh	r3, [r7, #2]
 80016ee:	405a      	eors	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	60da      	str	r2, [r3, #12]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
	...

08001700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 8087 	beq.w	8001828 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800171a:	4b92      	ldr	r3, [pc, #584]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b04      	cmp	r3, #4
 8001724:	d00c      	beq.n	8001740 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001726:	4b8f      	ldr	r3, [pc, #572]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b08      	cmp	r3, #8
 8001730:	d112      	bne.n	8001758 <HAL_RCC_OscConfig+0x58>
 8001732:	4b8c      	ldr	r3, [pc, #560]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173e:	d10b      	bne.n	8001758 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001740:	4b88      	ldr	r3, [pc, #544]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d06c      	beq.n	8001826 <HAL_RCC_OscConfig+0x126>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d168      	bne.n	8001826 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e22d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001760:	d106      	bne.n	8001770 <HAL_RCC_OscConfig+0x70>
 8001762:	4a80      	ldr	r2, [pc, #512]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 8001764:	4b7f      	ldr	r3, [pc, #508]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e02e      	b.n	80017ce <HAL_RCC_OscConfig+0xce>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10c      	bne.n	8001792 <HAL_RCC_OscConfig+0x92>
 8001778:	4a7a      	ldr	r2, [pc, #488]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 800177a:	4b7a      	ldr	r3, [pc, #488]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4a77      	ldr	r2, [pc, #476]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 8001786:	4b77      	ldr	r3, [pc, #476]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	e01d      	b.n	80017ce <HAL_RCC_OscConfig+0xce>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800179a:	d10c      	bne.n	80017b6 <HAL_RCC_OscConfig+0xb6>
 800179c:	4a71      	ldr	r2, [pc, #452]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 800179e:	4b71      	ldr	r3, [pc, #452]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4a6e      	ldr	r2, [pc, #440]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 80017aa:	4b6e      	ldr	r3, [pc, #440]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	e00b      	b.n	80017ce <HAL_RCC_OscConfig+0xce>
 80017b6:	4a6b      	ldr	r2, [pc, #428]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 80017b8:	4b6a      	ldr	r3, [pc, #424]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	4a68      	ldr	r2, [pc, #416]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 80017c4:	4b67      	ldr	r3, [pc, #412]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017cc:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d013      	beq.n	80017fe <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d6:	f7fe fcf9 	bl	80001cc <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017de:	f7fe fcf5 	bl	80001cc <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b64      	cmp	r3, #100	; 0x64
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e1e1      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f0:	4b5c      	ldr	r3, [pc, #368]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0xde>
 80017fc:	e014      	b.n	8001828 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fe:	f7fe fce5 	bl	80001cc <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001806:	f7fe fce1 	bl	80001cc <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b64      	cmp	r3, #100	; 0x64
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e1cd      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001818:	4b52      	ldr	r3, [pc, #328]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0x106>
 8001824:	e000      	b.n	8001828 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001826:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d063      	beq.n	80018fc <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001834:	4b4b      	ldr	r3, [pc, #300]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00b      	beq.n	8001858 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001840:	4b48      	ldr	r3, [pc, #288]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	2b08      	cmp	r3, #8
 800184a:	d11c      	bne.n	8001886 <HAL_RCC_OscConfig+0x186>
 800184c:	4b45      	ldr	r3, [pc, #276]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d116      	bne.n	8001886 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001858:	4b42      	ldr	r3, [pc, #264]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_RCC_OscConfig+0x170>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d001      	beq.n	8001870 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e1a1      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001870:	493c      	ldr	r1, [pc, #240]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 8001872:	4b3c      	ldr	r3, [pc, #240]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4313      	orrs	r3, r2
 8001882:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001884:	e03a      	b.n	80018fc <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d020      	beq.n	80018d0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800188e:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_RCC_OscConfig+0x268>)
 8001890:	2201      	movs	r2, #1
 8001892:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7fe fc9a 	bl	80001cc <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189c:	f7fe fc96 	bl	80001cc <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e182      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ae:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ba:	492a      	ldr	r1, [pc, #168]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 80018bc:	4b29      	ldr	r3, [pc, #164]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
 80018ce:	e015      	b.n	80018fc <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <HAL_RCC_OscConfig+0x268>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7fe fc79 	bl	80001cc <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018de:	f7fe fc75 	bl	80001cc <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e161      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f0      	bne.n	80018de <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b00      	cmp	r3, #0
 8001906:	d039      	beq.n	800197c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d019      	beq.n	8001944 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001916:	f7fe fc59 	bl	80001cc <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800191e:	f7fe fc55 	bl	80001cc <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e141      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_RCC_OscConfig+0x264>)
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 800193c:	2001      	movs	r0, #1
 800193e:	f000 faa3 	bl	8001e88 <RCC_Delay>
 8001942:	e01b      	b.n	800197c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_OscConfig+0x26c>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194a:	f7fe fc3f 	bl	80001cc <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	e00e      	b.n	8001970 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001952:	f7fe fc3b 	bl	80001cc <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d907      	bls.n	8001970 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e127      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4b4>
 8001964:	40021000 	.word	0x40021000
 8001968:	42420000 	.word	0x42420000
 800196c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	4b92      	ldr	r3, [pc, #584]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ea      	bne.n	8001952 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80a6 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198e:	4b8b      	ldr	r3, [pc, #556]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10d      	bne.n	80019b6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4a88      	ldr	r2, [pc, #544]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 800199c:	4b87      	ldr	r3, [pc, #540]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	61d3      	str	r3, [r2, #28]
 80019a6:	4b85      	ldr	r3, [pc, #532]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019b2:	2301      	movs	r3, #1
 80019b4:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b6:	4b82      	ldr	r3, [pc, #520]	; (8001bc0 <HAL_RCC_OscConfig+0x4c0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d118      	bne.n	80019f4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c2:	4a7f      	ldr	r2, [pc, #508]	; (8001bc0 <HAL_RCC_OscConfig+0x4c0>)
 80019c4:	4b7e      	ldr	r3, [pc, #504]	; (8001bc0 <HAL_RCC_OscConfig+0x4c0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ce:	f7fe fbfd 	bl	80001cc <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d6:	f7fe fbf9 	bl	80001cc <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b64      	cmp	r3, #100	; 0x64
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e0e5      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e8:	4b75      	ldr	r3, [pc, #468]	; (8001bc0 <HAL_RCC_OscConfig+0x4c0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x30a>
 80019fc:	4a6f      	ldr	r2, [pc, #444]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 80019fe:	4b6f      	ldr	r3, [pc, #444]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6213      	str	r3, [r2, #32]
 8001a08:	e02d      	b.n	8001a66 <HAL_RCC_OscConfig+0x366>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x32c>
 8001a12:	4a6a      	ldr	r2, [pc, #424]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001a14:	4b69      	ldr	r3, [pc, #420]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	6213      	str	r3, [r2, #32]
 8001a1e:	4a67      	ldr	r2, [pc, #412]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001a20:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	f023 0304 	bic.w	r3, r3, #4
 8001a28:	6213      	str	r3, [r2, #32]
 8001a2a:	e01c      	b.n	8001a66 <HAL_RCC_OscConfig+0x366>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	d10c      	bne.n	8001a4e <HAL_RCC_OscConfig+0x34e>
 8001a34:	4a61      	ldr	r2, [pc, #388]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001a36:	4b61      	ldr	r3, [pc, #388]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	f043 0304 	orr.w	r3, r3, #4
 8001a3e:	6213      	str	r3, [r2, #32]
 8001a40:	4a5e      	ldr	r2, [pc, #376]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001a42:	4b5e      	ldr	r3, [pc, #376]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6213      	str	r3, [r2, #32]
 8001a4c:	e00b      	b.n	8001a66 <HAL_RCC_OscConfig+0x366>
 8001a4e:	4a5b      	ldr	r2, [pc, #364]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001a50:	4b5a      	ldr	r3, [pc, #360]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	6213      	str	r3, [r2, #32]
 8001a5a:	4a58      	ldr	r2, [pc, #352]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001a5c:	4b57      	ldr	r3, [pc, #348]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	f023 0304 	bic.w	r3, r3, #4
 8001a64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d015      	beq.n	8001a9a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6e:	f7fe fbad 	bl	80001cc <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a74:	e00a      	b.n	8001a8c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7fe fba9 	bl	80001cc <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e093      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8c:	4b4b      	ldr	r3, [pc, #300]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0ee      	beq.n	8001a76 <HAL_RCC_OscConfig+0x376>
 8001a98:	e014      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9a:	f7fe fb97 	bl	80001cc <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa0:	e00a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa2:	f7fe fb93 	bl	80001cc <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e07d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab8:	4b40      	ldr	r3, [pc, #256]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1ee      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d105      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aca:	4a3c      	ldr	r2, [pc, #240]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001acc:	4b3b      	ldr	r3, [pc, #236]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d069      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ade:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d061      	beq.n	8001bae <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d146      	bne.n	8001b80 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af2:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7fe fb68 	bl	80001cc <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b00:	f7fe fb64 	bl	80001cc <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e050      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b12:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b26:	d108      	bne.n	8001b3a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b28:	4924      	ldr	r1, [pc, #144]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001b2a:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3a:	4820      	ldr	r0, [pc, #128]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a19      	ldr	r1, [r3, #32]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7fe fb38 	bl	80001cc <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b60:	f7fe fb34 	bl	80001cc <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e020      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x460>
 8001b7e:	e018      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b80:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7fe fb21 	bl	80001cc <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7fe fb1d 	bl	80001cc <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e009      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x48e>
 8001bac:	e001      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	42420060 	.word	0x42420060

08001bc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bd6:	4b72      	ldr	r3, [pc, #456]	; (8001da0 <HAL_RCC_ClockConfig+0x1d8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0207 	and.w	r2, r3, #7
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d210      	bcs.n	8001c06 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be4:	496e      	ldr	r1, [pc, #440]	; (8001da0 <HAL_RCC_ClockConfig+0x1d8>)
 8001be6:	4b6e      	ldr	r3, [pc, #440]	; (8001da0 <HAL_RCC_ClockConfig+0x1d8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 0207 	bic.w	r2, r3, #7
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bf4:	4b6a      	ldr	r3, [pc, #424]	; (8001da0 <HAL_RCC_ClockConfig+0x1d8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0207 	and.w	r2, r3, #7
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0c8      	b.n	8001d98 <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d008      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c12:	4964      	ldr	r1, [pc, #400]	; (8001da4 <HAL_RCC_ClockConfig+0x1dc>)
 8001c14:	4b63      	ldr	r3, [pc, #396]	; (8001da4 <HAL_RCC_ClockConfig+0x1dc>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d06a      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d107      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c38:	4b5a      	ldr	r3, [pc, #360]	; (8001da4 <HAL_RCC_ClockConfig+0x1dc>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d115      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0a7      	b.n	8001d98 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d107      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c50:	4b54      	ldr	r3, [pc, #336]	; (8001da4 <HAL_RCC_ClockConfig+0x1dc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d109      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e09b      	b.n	8001d98 <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	4b50      	ldr	r3, [pc, #320]	; (8001da4 <HAL_RCC_ClockConfig+0x1dc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e093      	b.n	8001d98 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c70:	494c      	ldr	r1, [pc, #304]	; (8001da4 <HAL_RCC_ClockConfig+0x1dc>)
 8001c72:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <HAL_RCC_ClockConfig+0x1dc>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f023 0203 	bic.w	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c82:	f7fe faa3 	bl	80001cc <HAL_GetTick>
 8001c86:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d112      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c92:	f7fe fa9b 	bl	80001cc <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e077      	b.n	8001d98 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca8:	4b3e      	ldr	r3, [pc, #248]	; (8001da4 <HAL_RCC_ClockConfig+0x1dc>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d1ee      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xca>
 8001cb4:	e027      	b.n	8001d06 <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d11d      	bne.n	8001cfa <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc0:	f7fe fa84 	bl	80001cc <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e060      	b.n	8001d98 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cd6:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <HAL_RCC_ClockConfig+0x1dc>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d1ee      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xf8>
 8001ce2:	e010      	b.n	8001d06 <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce4:	f7fe fa72 	bl	80001cc <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e04e      	b.n	8001d98 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <HAL_RCC_ClockConfig+0x1dc>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1ee      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <HAL_RCC_ClockConfig+0x1d8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0207 	and.w	r2, r3, #7
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d910      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d14:	4922      	ldr	r1, [pc, #136]	; (8001da0 <HAL_RCC_ClockConfig+0x1d8>)
 8001d16:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <HAL_RCC_ClockConfig+0x1d8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 0207 	bic.w	r2, r3, #7
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d24:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <HAL_RCC_ClockConfig+0x1d8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0207 	and.w	r2, r3, #7
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e030      	b.n	8001d98 <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d008      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d42:	4918      	ldr	r1, [pc, #96]	; (8001da4 <HAL_RCC_ClockConfig+0x1dc>)
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <HAL_RCC_ClockConfig+0x1dc>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d009      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d60:	4910      	ldr	r1, [pc, #64]	; (8001da4 <HAL_RCC_ClockConfig+0x1dc>)
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_RCC_ClockConfig+0x1dc>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d74:	f000 f81c 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 8001d78:	4601      	mov	r1, r0
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_RCC_ClockConfig+0x1dc>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <HAL_RCC_ClockConfig+0x1e0>)
 8001d86:	5cd3      	ldrb	r3, [r2, r3]
 8001d88:	fa21 f303 	lsr.w	r3, r1, r3
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <HAL_RCC_ClockConfig+0x1e4>)
 8001d8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7fe f9f1 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40022000 	.word	0x40022000
 8001da4:	40021000 	.word	0x40021000
 8001da8:	080030a4 	.word	0x080030a4
 8001dac:	20000000 	.word	0x20000000

08001db0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db0:	b490      	push	{r4, r7}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001db6:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001db8:	1d3c      	adds	r4, r7, #4
 8001dba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dc0:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001dda:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d002      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x40>
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d003      	beq.n	8001df6 <HAL_RCC_GetSysClockFreq+0x46>
 8001dee:	e02d      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001df2:	623b      	str	r3, [r7, #32]
      break;
 8001df4:	e02d      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	0c9b      	lsrs	r3, r3, #18
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e02:	4413      	add	r3, r2
 8001e04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d013      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	0c5b      	lsrs	r3, r3, #17
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e22:	4413      	add	r3, r2
 8001e24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e28:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001e2a:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	fb02 f303 	mul.w	r3, r2, r3
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3a:	e004      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e40:	fb02 f303 	mul.w	r3, r2, r3
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	623b      	str	r3, [r7, #32]
      break;
 8001e4a:	e002      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e4e:	623b      	str	r3, [r7, #32]
      break;
 8001e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e52:	6a3b      	ldr	r3, [r7, #32]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3728      	adds	r7, #40	; 0x28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc90      	pop	{r4, r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	08003080 	.word	0x08003080
 8001e64:	08003090 	.word	0x08003090
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	007a1200 	.word	0x007a1200
 8001e70:	003d0900 	.word	0x003d0900

08001e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e78:	4b02      	ldr	r3, [pc, #8]	; (8001e84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	20000000 	.word	0x20000000

08001e88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <RCC_Delay+0x34>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <RCC_Delay+0x38>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	0a5b      	lsrs	r3, r3, #9
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ea2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001ea4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1e5a      	subs	r2, r3, #1
 8001eaa:	60fa      	str	r2, [r7, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f9      	bne.n	8001ea4 <RCC_Delay+0x1c>
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	10624dd3 	.word	0x10624dd3

08001ec4 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e01d      	b.n	8001f12 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 ff9a 	bl	8002e24 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3304      	adds	r3, #4
 8001f00:	4619      	mov	r1, r3
 8001f02:	4610      	mov	r0, r2
 8001f04:	f000 fa34 	bl	8002370 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	68d2      	ldr	r2, [r2, #12]
 8001f2c:	f042 0201 	orr.w	r2, r2, #1
 8001f30:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	f042 0201 	orr.w	r2, r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d122      	bne.n	8001faa <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d11b      	bne.n	8001faa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f06f 0202 	mvn.w	r2, #2
 8001f7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f9d1 	bl	8002338 <HAL_TIM_IC_CaptureCallback>
 8001f96:	e005      	b.n	8001fa4 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f9c4 	bl	8002326 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f9d3 	bl	800234a <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d122      	bne.n	8001ffe <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d11b      	bne.n	8001ffe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f06f 0204 	mvn.w	r2, #4
 8001fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f9a7 	bl	8002338 <HAL_TIM_IC_CaptureCallback>
 8001fea:	e005      	b.n	8001ff8 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f99a 	bl	8002326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f9a9 	bl	800234a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b08      	cmp	r3, #8
 800200a:	d122      	bne.n	8002052 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b08      	cmp	r3, #8
 8002018:	d11b      	bne.n	8002052 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f06f 0208 	mvn.w	r2, #8
 8002022:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2204      	movs	r2, #4
 8002028:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f97d 	bl	8002338 <HAL_TIM_IC_CaptureCallback>
 800203e:	e005      	b.n	800204c <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f970 	bl	8002326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f97f 	bl	800234a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	2b10      	cmp	r3, #16
 800205e:	d122      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b10      	cmp	r3, #16
 800206c:	d11b      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f06f 0210 	mvn.w	r2, #16
 8002076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2208      	movs	r2, #8
 800207c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f953 	bl	8002338 <HAL_TIM_IC_CaptureCallback>
 8002092:	e005      	b.n	80020a0 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f946 	bl	8002326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f955 	bl	800234a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d10e      	bne.n	80020d2 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d107      	bne.n	80020d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f06f 0201 	mvn.w	r2, #1
 80020ca:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f921 	bl	8002314 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020dc:	2b80      	cmp	r3, #128	; 0x80
 80020de:	d10e      	bne.n	80020fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ea:	2b80      	cmp	r3, #128	; 0x80
 80020ec:	d107      	bne.n	80020fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 fa87 	bl	800260c <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002108:	2b40      	cmp	r3, #64	; 0x40
 800210a:	d10e      	bne.n	800212a <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	2b40      	cmp	r3, #64	; 0x40
 8002118:	d107      	bne.n	800212a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002122:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f919 	bl	800235c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	2b20      	cmp	r3, #32
 8002136:	d10e      	bne.n	8002156 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	2b20      	cmp	r3, #32
 8002144:	d107      	bne.n	8002156 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f06f 0220 	mvn.w	r2, #32
 800214e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 fa52 	bl	80025fa <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_TIM_ConfigClockSource+0x1c>
 8002176:	2302      	movs	r3, #2
 8002178:	e0c8      	b.n	800230c <HAL_TIM_ConfigClockSource+0x1ae>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2202      	movs	r2, #2
 8002186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002198:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021a0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b40      	cmp	r3, #64	; 0x40
 80021b0:	d077      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0x144>
 80021b2:	2b40      	cmp	r3, #64	; 0x40
 80021b4:	d80e      	bhi.n	80021d4 <HAL_TIM_ConfigClockSource+0x76>
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	f000 808a 	beq.w	80022d0 <HAL_TIM_ConfigClockSource+0x172>
 80021bc:	2b10      	cmp	r3, #16
 80021be:	d802      	bhi.n	80021c6 <HAL_TIM_ConfigClockSource+0x68>
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d07e      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80021c4:	e099      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	f000 8089 	beq.w	80022de <HAL_TIM_ConfigClockSource+0x180>
 80021cc:	2b30      	cmp	r3, #48	; 0x30
 80021ce:	f000 808d 	beq.w	80022ec <HAL_TIM_ConfigClockSource+0x18e>
    break;
 80021d2:	e092      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80021d4:	2b70      	cmp	r3, #112	; 0x70
 80021d6:	d016      	beq.n	8002206 <HAL_TIM_ConfigClockSource+0xa8>
 80021d8:	2b70      	cmp	r3, #112	; 0x70
 80021da:	d804      	bhi.n	80021e6 <HAL_TIM_ConfigClockSource+0x88>
 80021dc:	2b50      	cmp	r3, #80	; 0x50
 80021de:	d040      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0x104>
 80021e0:	2b60      	cmp	r3, #96	; 0x60
 80021e2:	d04e      	beq.n	8002282 <HAL_TIM_ConfigClockSource+0x124>
    break;
 80021e4:	e089      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80021e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ea:	d003      	beq.n	80021f4 <HAL_TIM_ConfigClockSource+0x96>
 80021ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f0:	d024      	beq.n	800223c <HAL_TIM_ConfigClockSource+0xde>
    break;
 80021f2:	e082      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	6892      	ldr	r2, [r2, #8]
 80021fe:	f022 0207 	bic.w	r2, r2, #7
 8002202:	609a      	str	r2, [r3, #8]
    break;
 8002204:	e079      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6899      	ldr	r1, [r3, #8]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f000 f98b 	bl	8002530 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002228:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002230:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	609a      	str	r2, [r3, #8]
    break;
 800223a:	e05e      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	6899      	ldr	r1, [r3, #8]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f000 f970 	bl	8002530 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	6892      	ldr	r2, [r2, #8]
 800225a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800225e:	609a      	str	r2, [r3, #8]
    break;
 8002260:	e04b      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6859      	ldr	r1, [r3, #4]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	461a      	mov	r2, r3
 8002270:	f000 f8da 	bl	8002428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2150      	movs	r1, #80	; 0x50
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f939 	bl	80024f2 <TIM_ITRx_SetConfig>
    break;
 8002280:	e03b      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6859      	ldr	r1, [r3, #4]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	461a      	mov	r2, r3
 8002290:	f000 f8fc 	bl	800248c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2160      	movs	r1, #96	; 0x60
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f929 	bl	80024f2 <TIM_ITRx_SetConfig>
    break;
 80022a0:	e02b      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	461a      	mov	r2, r3
 80022b0:	f000 f8ba 	bl	8002428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2140      	movs	r1, #64	; 0x40
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f919 	bl	80024f2 <TIM_ITRx_SetConfig>
    break;
 80022c0:	e01b      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2100      	movs	r1, #0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 f912 	bl	80024f2 <TIM_ITRx_SetConfig>
    break;
 80022ce:	e014      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2110      	movs	r1, #16
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f90b 	bl	80024f2 <TIM_ITRx_SetConfig>
    break;
 80022dc:	e00d      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2120      	movs	r1, #32
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 f904 	bl	80024f2 <TIM_ITRx_SetConfig>
    break;
 80022ea:	e006      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2130      	movs	r1, #48	; 0x30
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f8fd 	bl	80024f2 <TIM_ITRx_SetConfig>
    break;
 80022f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
	...

08002370 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a26      	ldr	r2, [pc, #152]	; (8002420 <TIM_Base_SetConfig+0xb0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d007      	beq.n	800239c <TIM_Base_SetConfig+0x2c>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002392:	d003      	beq.n	800239c <TIM_Base_SetConfig+0x2c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a23      	ldr	r2, [pc, #140]	; (8002424 <TIM_Base_SetConfig+0xb4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d108      	bne.n	80023ae <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a1b      	ldr	r2, [pc, #108]	; (8002420 <TIM_Base_SetConfig+0xb0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <TIM_Base_SetConfig+0x56>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023bc:	d003      	beq.n	80023c6 <TIM_Base_SetConfig+0x56>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a18      	ldr	r2, [pc, #96]	; (8002424 <TIM_Base_SetConfig+0xb4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d108      	bne.n	80023d8 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023de:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a07      	ldr	r2, [pc, #28]	; (8002420 <TIM_Base_SetConfig+0xb0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d103      	bne.n	8002410 <TIM_Base_SetConfig+0xa0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	615a      	str	r2, [r3, #20]
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	40012c00 	.word	0x40012c00
 8002424:	40000400 	.word	0x40000400

08002428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	f023 0201 	bic.w	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800245a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	4313      	orrs	r3, r2
 8002464:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f023 030a 	bic.w	r3, r3, #10
 800246c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	621a      	str	r2, [r3, #32]
}
 8002482:	bf00      	nop
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	f023 0210 	bic.w	r2, r3, #16
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	031b      	lsls	r3, r3, #12
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	621a      	str	r2, [r3, #32]
}
 80024e8:	bf00      	nop
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b085      	sub	sp, #20
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250e:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002510:	887b      	ldrh	r3, [r7, #2]
 8002512:	f043 0307 	orr.w	r3, r3, #7
 8002516:	b29b      	uxth	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4313      	orrs	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	609a      	str	r2, [r3, #8]
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800254e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	021a      	lsls	r2, r3, #8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	431a      	orrs	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4313      	orrs	r3, r2
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4313      	orrs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	609a      	str	r2, [r3, #8]
}
 8002568:	bf00      	nop
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002586:	2302      	movs	r3, #2
 8002588:	e032      	b.n	80025f0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2202      	movs	r2, #2
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	6852      	ldr	r2, [r2, #4]
 80025a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025a8:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	6851      	ldr	r1, [r2, #4]
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	6892      	ldr	r2, [r2, #8]
 80025c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ca:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	6891      	ldr	r1, [r2, #8]
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	6852      	ldr	r2, [r2, #4]
 80025da:	430a      	orrs	r2, r1
 80025dc:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr

080025fa <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
	...

08002620 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002626:	f7fd fd91 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800262a:	f000 f8bf 	bl	80027ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800262e:	f000 fafb 	bl	8002c28 <MX_GPIO_Init>

  MX_TIM3_Init();
 8002632:	f000 faab 	bl	8002b8c <MX_TIM3_Init>
  MX_CAN_Init();
 8002636:	f000 f909 	bl	800284c <MX_CAN_Init>


  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800263a:	4853      	ldr	r0, [pc, #332]	; (8002788 <main+0x168>)
 800263c:	f7ff fc6d 	bl	8001f1a <HAL_TIM_Base_Start_IT>

 HAL_CAN_Receive_IT(&hcanR,CAN_FIFO1);        /*CAN receive interrupt function*/
 8002640:	2101      	movs	r1, #1
 8002642:	4852      	ldr	r0, [pc, #328]	; (800278c <main+0x16c>)
 8002644:	f7fe f94a 	bl	80008dc <HAL_CAN_Receive_IT>

  /* USER CODE BEGIN 3 */



	  	  	  	  	  	 if(flag==1)
 8002648:	4b51      	ldr	r3, [pc, #324]	; (8002790 <main+0x170>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d10a      	bne.n	8002666 <main+0x46>
	  			        {

	  			        			HAL_CAN_Transmit(&hcan,20);
 8002650:	2114      	movs	r1, #20
 8002652:	4850      	ldr	r0, [pc, #320]	; (8002794 <main+0x174>)
 8002654:	f7fd ff96 	bl	8000584 <HAL_CAN_Transmit>
	  			        			HAL_CAN_Transmit(&hcan1,20);
 8002658:	2114      	movs	r1, #20
 800265a:	484f      	ldr	r0, [pc, #316]	; (8002798 <main+0x178>)
 800265c:	f7fd ff92 	bl	8000584 <HAL_CAN_Transmit>
	  			        			flag=0;
 8002660:	4b4b      	ldr	r3, [pc, #300]	; (8002790 <main+0x170>)
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]

	  			        }

	  			        if(flag2==1)
 8002666:	4b4d      	ldr	r3, [pc, #308]	; (800279c <main+0x17c>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d106      	bne.n	800267c <main+0x5c>
	  			        {
	  			        	HAL_CAN_Transmit(&hcan2,20);
 800266e:	2114      	movs	r1, #20
 8002670:	484b      	ldr	r0, [pc, #300]	; (80027a0 <main+0x180>)
 8002672:	f7fd ff87 	bl	8000584 <HAL_CAN_Transmit>
	  			        	flag2=0;
 8002676:	4b49      	ldr	r3, [pc, #292]	; (800279c <main+0x17c>)
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
	  			        }
	  			        if (flagR==1)
 800267c:	4b49      	ldr	r3, [pc, #292]	; (80027a4 <main+0x184>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d118      	bne.n	80026b6 <main+0x96>
	  			        {
	  			        	for(i=0;i<8;i++)
 8002684:	2300      	movs	r3, #0
 8002686:	73bb      	strb	r3, [r7, #14]
 8002688:	e00d      	b.n	80026a6 <main+0x86>
	  			        	{
	  			        		Received_Data[i]=hcanR.pRx1Msg->Data[i];
 800268a:	7bbb      	ldrb	r3, [r7, #14]
 800268c:	4a3f      	ldr	r2, [pc, #252]	; (800278c <main+0x16c>)
 800268e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002690:	7bba      	ldrb	r2, [r7, #14]
 8002692:	440a      	add	r2, r1
 8002694:	7d12      	ldrb	r2, [r2, #20]
 8002696:	f107 0110 	add.w	r1, r7, #16
 800269a:	440b      	add	r3, r1
 800269c:	f803 2c0c 	strb.w	r2, [r3, #-12]
	  			        	for(i=0;i<8;i++)
 80026a0:	7bbb      	ldrb	r3, [r7, #14]
 80026a2:	3301      	adds	r3, #1
 80026a4:	73bb      	strb	r3, [r7, #14]
 80026a6:	7bbb      	ldrb	r3, [r7, #14]
 80026a8:	2b07      	cmp	r3, #7
 80026aa:	d9ee      	bls.n	800268a <main+0x6a>
	  			        	}
	  			        	a=Received_Data[0];
 80026ac:	793b      	ldrb	r3, [r7, #4]
 80026ae:	73fb      	strb	r3, [r7, #15]
	  			        		flagR=0;
 80026b0:	4b3c      	ldr	r3, [pc, #240]	; (80027a4 <main+0x184>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
	  			        }

	  			        	/*switch case on the camera status to map to four LEDs*/
	  			        switch(a)
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	2b0f      	cmp	r3, #15
 80026ba:	d863      	bhi.n	8002784 <main+0x164>
 80026bc:	a201      	add	r2, pc, #4	; (adr r2, 80026c4 <main+0xa4>)
 80026be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c2:	bf00      	nop
 80026c4:	08002705 	.word	0x08002705
 80026c8:	0800270d 	.word	0x0800270d
 80026cc:	08002715 	.word	0x08002715
 80026d0:	0800271d 	.word	0x0800271d
 80026d4:	08002725 	.word	0x08002725
 80026d8:	0800272d 	.word	0x0800272d
 80026dc:	08002735 	.word	0x08002735
 80026e0:	0800273d 	.word	0x0800273d
 80026e4:	08002745 	.word	0x08002745
 80026e8:	0800274d 	.word	0x0800274d
 80026ec:	08002755 	.word	0x08002755
 80026f0:	0800275d 	.word	0x0800275d
 80026f4:	08002765 	.word	0x08002765
 80026f8:	0800276d 	.word	0x0800276d
 80026fc:	08002775 	.word	0x08002775
 8002700:	0800277d 	.word	0x0800277d
	  			        {
	  			        case 0:
	  			        	GPIOA_ODR=0;
 8002704:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <main+0x188>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
	  			        	break;
 800270a:	e03c      	b.n	8002786 <main+0x166>
	  			        case 1:
	  			        	GPIOA_ODR=1;
 800270c:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <main+0x188>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]
	  			        	break;
 8002712:	e038      	b.n	8002786 <main+0x166>
	  			        case 2:
	  			        	GPIOA_ODR=2;
 8002714:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <main+0x188>)
 8002716:	2202      	movs	r2, #2
 8002718:	601a      	str	r2, [r3, #0]
	  			        	break;
 800271a:	e034      	b.n	8002786 <main+0x166>
	  			        case 3:
	  			        	GPIOA_ODR=3;
 800271c:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <main+0x188>)
 800271e:	2203      	movs	r2, #3
 8002720:	601a      	str	r2, [r3, #0]
	  			        	break;
 8002722:	e030      	b.n	8002786 <main+0x166>
	  			        case 4:
	  			        	GPIOA_ODR=4;
 8002724:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <main+0x188>)
 8002726:	2204      	movs	r2, #4
 8002728:	601a      	str	r2, [r3, #0]
	  			        	break;
 800272a:	e02c      	b.n	8002786 <main+0x166>
	  			        case 5:
	  			        	GPIOA_ODR=5;
 800272c:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <main+0x188>)
 800272e:	2205      	movs	r2, #5
 8002730:	601a      	str	r2, [r3, #0]
	  			        	break;
 8002732:	e028      	b.n	8002786 <main+0x166>
	  			        case 6:
	  			        	GPIOA_ODR=6;
 8002734:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <main+0x188>)
 8002736:	2206      	movs	r2, #6
 8002738:	601a      	str	r2, [r3, #0]
	  			        	break;
 800273a:	e024      	b.n	8002786 <main+0x166>
	  			        case 7:
	  			        	GPIOA_ODR=7;
 800273c:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <main+0x188>)
 800273e:	2207      	movs	r2, #7
 8002740:	601a      	str	r2, [r3, #0]
	  			        	break;
 8002742:	e020      	b.n	8002786 <main+0x166>
	  			        case 8:
	  			        	GPIOA_ODR=8;
 8002744:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <main+0x188>)
 8002746:	2208      	movs	r2, #8
 8002748:	601a      	str	r2, [r3, #0]
	  			        	break;
 800274a:	e01c      	b.n	8002786 <main+0x166>
	  			        case 9:
	  			        	GPIOA_ODR=9;
 800274c:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <main+0x188>)
 800274e:	2209      	movs	r2, #9
 8002750:	601a      	str	r2, [r3, #0]
	  			        	break;
 8002752:	e018      	b.n	8002786 <main+0x166>
	  			        case 10:
	  			        	GPIOA_ODR=10;
 8002754:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <main+0x188>)
 8002756:	220a      	movs	r2, #10
 8002758:	601a      	str	r2, [r3, #0]
	  			        	break;
 800275a:	e014      	b.n	8002786 <main+0x166>
	  			        case 11:
	  			        	GPIOA_ODR=11;
 800275c:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <main+0x188>)
 800275e:	220b      	movs	r2, #11
 8002760:	601a      	str	r2, [r3, #0]
	  			        	break;
 8002762:	e010      	b.n	8002786 <main+0x166>
	  			        case 12:
	  			        	GPIOA_ODR=12;
 8002764:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <main+0x188>)
 8002766:	220c      	movs	r2, #12
 8002768:	601a      	str	r2, [r3, #0]
	  			        	break;
 800276a:	e00c      	b.n	8002786 <main+0x166>
	  			        case 13:
	  			        	GPIOA_ODR=13;
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <main+0x188>)
 800276e:	220d      	movs	r2, #13
 8002770:	601a      	str	r2, [r3, #0]
	  			        	break;
 8002772:	e008      	b.n	8002786 <main+0x166>
	  			        case 14:
	  			        	GPIOA_ODR=14;
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <main+0x188>)
 8002776:	220e      	movs	r2, #14
 8002778:	601a      	str	r2, [r3, #0]
	  			        	break;
 800277a:	e004      	b.n	8002786 <main+0x166>
	  			        case 15:
	  			        	GPIOA_ODR=15;
 800277c:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <main+0x188>)
 800277e:	220f      	movs	r2, #15
 8002780:	601a      	str	r2, [r3, #0]
	  			        	break;
 8002782:	e000      	b.n	8002786 <main+0x166>
	  			        default:
	  			        	/*Misra*/
	  			        	break;
 8002784:	bf00      	nop
	  	  	  	  	  	 if(flag==1)
 8002786:	e75f      	b.n	8002648 <main+0x28>
 8002788:	20000098 	.word	0x20000098
 800278c:	20000138 	.word	0x20000138
 8002790:	20000020 	.word	0x20000020
 8002794:	20000054 	.word	0x20000054
 8002798:	200001bc 	.word	0x200001bc
 800279c:	20000022 	.word	0x20000022
 80027a0:	200000f4 	.word	0x200000f4
 80027a4:	20000021 	.word	0x20000021
 80027a8:	4001080c 	.word	0x4001080c

080027ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b090      	sub	sp, #64	; 0x40
 80027b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027b2:	2302      	movs	r3, #2
 80027b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027b6:	2301      	movs	r3, #1
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80027ba:	2310      	movs	r3, #16
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027be:	2302      	movs	r3, #2
 80027c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80027c2:	2300      	movs	r3, #0
 80027c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80027c6:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80027ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027cc:	f107 0318 	add.w	r3, r7, #24
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fe ff95 	bl	8001700 <HAL_RCC_OscConfig>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d004      	beq.n	80027e6 <SystemClock_Config+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80027dc:	f240 1137 	movw	r1, #311	; 0x137
 80027e0:	4818      	ldr	r0, [pc, #96]	; (8002844 <SystemClock_Config+0x98>)
 80027e2:	f000 fa8f 	bl	8002d04 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027e6:	230f      	movs	r3, #15
 80027e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027ea:	2302      	movs	r3, #2
 80027ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	2101      	movs	r1, #1
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff f9e1 	bl	8001bc8 <HAL_RCC_ClockConfig>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d004      	beq.n	8002816 <SystemClock_Config+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800280c:	f240 1145 	movw	r1, #325	; 0x145
 8002810:	480c      	ldr	r0, [pc, #48]	; (8002844 <SystemClock_Config+0x98>)
 8002812:	f000 fa77 	bl	8002d04 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002816:	f7ff fb2d 	bl	8001e74 <HAL_RCC_GetHCLKFreq>
 800281a:	4602      	mov	r2, r0
 800281c:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <SystemClock_Config+0x9c>)
 800281e:	fba3 2302 	umull	r2, r3, r3, r2
 8002822:	099b      	lsrs	r3, r3, #6
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fdce 	bl	80013c6 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800282a:	2004      	movs	r0, #4
 800282c:	f7fe fdd8 	bl	80013e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002830:	2200      	movs	r2, #0
 8002832:	2100      	movs	r1, #0
 8002834:	f04f 30ff 	mov.w	r0, #4294967295
 8002838:	f7fe fd9b 	bl	8001372 <HAL_NVIC_SetPriority>
}
 800283c:	bf00      	nop
 800283e:	3740      	adds	r7, #64	; 0x40
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	08003094 	.word	0x08003094
 8002848:	10624dd3 	.word	0x10624dd3

0800284c <MX_CAN_Init>:

/* CAN init function */
static void MX_CAN_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0





	hcan.pTxMsg = &TxMessage;
 8002850:	4b9d      	ldr	r3, [pc, #628]	; (8002ac8 <MX_CAN_Init+0x27c>)
 8002852:	4a9e      	ldr	r2, [pc, #632]	; (8002acc <MX_CAN_Init+0x280>)
 8002854:	631a      	str	r2, [r3, #48]	; 0x30


	hcan1.pTxMsg = &TxMessage1;
 8002856:	4b9e      	ldr	r3, [pc, #632]	; (8002ad0 <MX_CAN_Init+0x284>)
 8002858:	4a9e      	ldr	r2, [pc, #632]	; (8002ad4 <MX_CAN_Init+0x288>)
 800285a:	631a      	str	r2, [r3, #48]	; 0x30


		hcan2.pTxMsg = &TxMessage2;
 800285c:	4b9e      	ldr	r3, [pc, #632]	; (8002ad8 <MX_CAN_Init+0x28c>)
 800285e:	4a9f      	ldr	r2, [pc, #636]	; (8002adc <MX_CAN_Init+0x290>)
 8002860:	631a      	str	r2, [r3, #48]	; 0x30

		/*hcan handler configuration*/

  hcan.Instance = CAN1;
 8002862:	4b99      	ldr	r3, [pc, #612]	; (8002ac8 <MX_CAN_Init+0x27c>)
 8002864:	4a9e      	ldr	r2, [pc, #632]	; (8002ae0 <MX_CAN_Init+0x294>)
 8002866:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8002868:	4b97      	ldr	r3, [pc, #604]	; (8002ac8 <MX_CAN_Init+0x27c>)
 800286a:	2203      	movs	r2, #3
 800286c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;	/*CAN working in normal mode*/
 800286e:	4b96      	ldr	r3, [pc, #600]	; (8002ac8 <MX_CAN_Init+0x27c>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
  hcan.Init.SJW = CAN_BS1_1TQ;      /*CAN_synchronisation_jump_width*/
 8002874:	4b94      	ldr	r3, [pc, #592]	; (8002ac8 <MX_CAN_Init+0x27c>)
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]
  hcan.Init.BS1 = CAN_BS1_12TQ;		/*CAN_time_quantum_in_bit_segment_1*/
 800287a:	4b93      	ldr	r3, [pc, #588]	; (8002ac8 <MX_CAN_Init+0x27c>)
 800287c:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8002880:	611a      	str	r2, [r3, #16]
  hcan.Init.BS2 = CAN_BS2_3TQ;		/*CAN_time_quantum_in_bit_segment_2*/
 8002882:	4b91      	ldr	r3, [pc, #580]	; (8002ac8 <MX_CAN_Init+0x27c>)
 8002884:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002888:	615a      	str	r2, [r3, #20]
  hcan.Init.TTCM = DISABLE;			/*Disable the time triggered communication mode*/
 800288a:	4b8f      	ldr	r3, [pc, #572]	; (8002ac8 <MX_CAN_Init+0x27c>)
 800288c:	2200      	movs	r2, #0
 800288e:	619a      	str	r2, [r3, #24]
  hcan.Init.ABOM = DISABLE;			/*Disable the automatic bus-off management*/
 8002890:	4b8d      	ldr	r3, [pc, #564]	; (8002ac8 <MX_CAN_Init+0x27c>)
 8002892:	2200      	movs	r2, #0
 8002894:	61da      	str	r2, [r3, #28]
  hcan.Init.AWUM = DISABLE;			/*Disable the automatic wake-up mode*/
 8002896:	4b8c      	ldr	r3, [pc, #560]	; (8002ac8 <MX_CAN_Init+0x27c>)
 8002898:	2200      	movs	r2, #0
 800289a:	621a      	str	r2, [r3, #32]
  hcan.Init.NART = DISABLE;			/*Disable the non-automatic retransmission mode*/
 800289c:	4b8a      	ldr	r3, [pc, #552]	; (8002ac8 <MX_CAN_Init+0x27c>)
 800289e:	2200      	movs	r2, #0
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;			/*Disable the receive FIFO Locked mode( Once a receive FIFO is full the next incoming
 80028a2:	4b89      	ldr	r3, [pc, #548]	; (8002ac8 <MX_CAN_Init+0x27c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
										message will overwrite the previous one.)*/
  hcan.Init.TXFP = DISABLE;			/* Disable the transmit FIFO priority*/
 80028a8:	4b87      	ldr	r3, [pc, #540]	; (8002ac8 <MX_CAN_Init+0x27c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*hcan1 handler configuration*/

  hcan1.Instance = CAN1;
 80028ae:	4b88      	ldr	r3, [pc, #544]	; (8002ad0 <MX_CAN_Init+0x284>)
 80028b0:	4a8b      	ldr	r2, [pc, #556]	; (8002ae0 <MX_CAN_Init+0x294>)
 80028b2:	601a      	str	r2, [r3, #0]
   hcan1.Init.Prescaler = 3;
 80028b4:	4b86      	ldr	r3, [pc, #536]	; (8002ad0 <MX_CAN_Init+0x284>)
 80028b6:	2203      	movs	r2, #3
 80028b8:	605a      	str	r2, [r3, #4]
   hcan1.Init.Mode = CAN_MODE_NORMAL;    /*CAN working in normal mode*/
 80028ba:	4b85      	ldr	r3, [pc, #532]	; (8002ad0 <MX_CAN_Init+0x284>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
   hcan1.Init.SJW = CAN_BS1_1TQ;         /*CAN_synchronisation_jump_width*/
 80028c0:	4b83      	ldr	r3, [pc, #524]	; (8002ad0 <MX_CAN_Init+0x284>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	60da      	str	r2, [r3, #12]
   hcan1.Init.BS1 = CAN_BS1_12TQ;        /*CAN_time_quantum_in_bit_segment_1*/
 80028c6:	4b82      	ldr	r3, [pc, #520]	; (8002ad0 <MX_CAN_Init+0x284>)
 80028c8:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80028cc:	611a      	str	r2, [r3, #16]
   hcan1.Init.BS2 = CAN_BS2_3TQ;         /*CAN_time_quantum_in_bit_segment_2*/
 80028ce:	4b80      	ldr	r3, [pc, #512]	; (8002ad0 <MX_CAN_Init+0x284>)
 80028d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80028d4:	615a      	str	r2, [r3, #20]
   hcan1.Init.TTCM = DISABLE;            /*Disable the time triggered communication mode*/
 80028d6:	4b7e      	ldr	r3, [pc, #504]	; (8002ad0 <MX_CAN_Init+0x284>)
 80028d8:	2200      	movs	r2, #0
 80028da:	619a      	str	r2, [r3, #24]
   hcan1.Init.ABOM = DISABLE;            /*Disable the automatic bus-off management*/
 80028dc:	4b7c      	ldr	r3, [pc, #496]	; (8002ad0 <MX_CAN_Init+0x284>)
 80028de:	2200      	movs	r2, #0
 80028e0:	61da      	str	r2, [r3, #28]
   hcan1.Init.AWUM = DISABLE;            /*Disable the automatic wake-up mode*/
 80028e2:	4b7b      	ldr	r3, [pc, #492]	; (8002ad0 <MX_CAN_Init+0x284>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	621a      	str	r2, [r3, #32]
   hcan1.Init.NART = DISABLE;            /*Disable the non-automatic retransmission mode*/
 80028e8:	4b79      	ldr	r3, [pc, #484]	; (8002ad0 <MX_CAN_Init+0x284>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24
   hcan1.Init.RFLM = DISABLE;            /*Disable the receive FIFO Locked mode( Once a receive FIFO is full the next incoming message will overwrite the previous one.)*/
 80028ee:	4b78      	ldr	r3, [pc, #480]	; (8002ad0 <MX_CAN_Init+0x284>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	629a      	str	r2, [r3, #40]	; 0x28
   hcan1.Init.TXFP = DISABLE;             /* Disable the transmit FIFO priority*/
 80028f4:	4b76      	ldr	r3, [pc, #472]	; (8002ad0 <MX_CAN_Init+0x284>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	62da      	str	r2, [r3, #44]	; 0x2c

   /*hcan2 handler*/

   hcan2.Instance = CAN1;
 80028fa:	4b77      	ldr	r3, [pc, #476]	; (8002ad8 <MX_CAN_Init+0x28c>)
 80028fc:	4a78      	ldr	r2, [pc, #480]	; (8002ae0 <MX_CAN_Init+0x294>)
 80028fe:	601a      	str	r2, [r3, #0]
    hcan2.Init.Prescaler = 3;
 8002900:	4b75      	ldr	r3, [pc, #468]	; (8002ad8 <MX_CAN_Init+0x28c>)
 8002902:	2203      	movs	r2, #3
 8002904:	605a      	str	r2, [r3, #4]
    hcan2.Init.Mode = CAN_MODE_NORMAL;   /*CAN working in normal mode*/
 8002906:	4b74      	ldr	r3, [pc, #464]	; (8002ad8 <MX_CAN_Init+0x28c>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
    hcan2.Init.SJW = CAN_BS1_1TQ;        /*CAN_synchronisation_jump_width*/
 800290c:	4b72      	ldr	r3, [pc, #456]	; (8002ad8 <MX_CAN_Init+0x28c>)
 800290e:	2200      	movs	r2, #0
 8002910:	60da      	str	r2, [r3, #12]
    hcan2.Init.BS1 = CAN_BS1_12TQ;       /*CAN_time_quantum_in_bit_segment_1*/
 8002912:	4b71      	ldr	r3, [pc, #452]	; (8002ad8 <MX_CAN_Init+0x28c>)
 8002914:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8002918:	611a      	str	r2, [r3, #16]
    hcan2.Init.BS2 = CAN_BS2_3TQ;        /*CAN_time_quantum_in_bit_segment_2*/
 800291a:	4b6f      	ldr	r3, [pc, #444]	; (8002ad8 <MX_CAN_Init+0x28c>)
 800291c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002920:	615a      	str	r2, [r3, #20]
    hcan2.Init.TTCM = DISABLE;           /*Disable the time triggered communication mode*/
 8002922:	4b6d      	ldr	r3, [pc, #436]	; (8002ad8 <MX_CAN_Init+0x28c>)
 8002924:	2200      	movs	r2, #0
 8002926:	619a      	str	r2, [r3, #24]
    hcan2.Init.ABOM = DISABLE;           /*Disable the automatic bus-off management*/
 8002928:	4b6b      	ldr	r3, [pc, #428]	; (8002ad8 <MX_CAN_Init+0x28c>)
 800292a:	2200      	movs	r2, #0
 800292c:	61da      	str	r2, [r3, #28]
    hcan2.Init.AWUM = DISABLE;           /*Disable the automatic wake-up mode*/
 800292e:	4b6a      	ldr	r3, [pc, #424]	; (8002ad8 <MX_CAN_Init+0x28c>)
 8002930:	2200      	movs	r2, #0
 8002932:	621a      	str	r2, [r3, #32]
    hcan2.Init.NART = DISABLE;           /*Disable the non-automatic retransmission mode*/
 8002934:	4b68      	ldr	r3, [pc, #416]	; (8002ad8 <MX_CAN_Init+0x28c>)
 8002936:	2200      	movs	r2, #0
 8002938:	625a      	str	r2, [r3, #36]	; 0x24
    hcan2.Init.RFLM = DISABLE;           /*Disable the receive FIFO Locked mode( Once a receive FIFO is full the next incoming message will overwrite the previous one.)*/
 800293a:	4b67      	ldr	r3, [pc, #412]	; (8002ad8 <MX_CAN_Init+0x28c>)
 800293c:	2200      	movs	r2, #0
 800293e:	629a      	str	r2, [r3, #40]	; 0x28
    hcan2.Init.TXFP = DISABLE;            /* Disable the transmit FIFO priority*/
 8002940:	4b65      	ldr	r3, [pc, #404]	; (8002ad8 <MX_CAN_Init+0x28c>)
 8002942:	2200      	movs	r2, #0
 8002944:	62da      	str	r2, [r3, #44]	; 0x2c


    /*Message transmit 1*/

  hcan.pTxMsg->StdId=0x10;			/*standard ID*/
 8002946:	4b60      	ldr	r3, [pc, #384]	; (8002ac8 <MX_CAN_Init+0x27c>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	2210      	movs	r2, #16
 800294c:	601a      	str	r2, [r3, #0]
  hcan.pTxMsg->IDE=CAN_ID_STD;		/*ID is '0' which means it runs in standard format*/
 800294e:	4b5e      	ldr	r3, [pc, #376]	; (8002ac8 <MX_CAN_Init+0x27c>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  hcan.pTxMsg->RTR=CAN_RTR_DATA;	/*'RTR' is '0' which means data frame*/
 8002956:	4b5c      	ldr	r3, [pc, #368]	; (8002ac8 <MX_CAN_Init+0x27c>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	2200      	movs	r2, #0
 800295c:	60da      	str	r2, [r3, #12]
  hcan.pTxMsg->DLC=8;				/*'8' byte data'*/
 800295e:	4b5a      	ldr	r3, [pc, #360]	; (8002ac8 <MX_CAN_Init+0x27c>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	2208      	movs	r2, #8
 8002964:	611a      	str	r2, [r3, #16]
  hcan.pTxMsg->Data[2]=byte_01_2;
 8002966:	4b58      	ldr	r3, [pc, #352]	; (8002ac8 <MX_CAN_Init+0x27c>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	2200      	movs	r2, #0
 800296c:	759a      	strb	r2, [r3, #22]
  hcan.pTxMsg->Data[3]=byte_01_3;
 800296e:	4b56      	ldr	r3, [pc, #344]	; (8002ac8 <MX_CAN_Init+0x27c>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	2201      	movs	r2, #1
 8002974:	75da      	strb	r2, [r3, #23]
  hcan.pTxMsg->Data[4]=byte_01_4;
 8002976:	4b54      	ldr	r3, [pc, #336]	; (8002ac8 <MX_CAN_Init+0x27c>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	2202      	movs	r2, #2
 800297c:	761a      	strb	r2, [r3, #24]
  hcan.pTxMsg->Data[5]=byte_01_5;
 800297e:	4b52      	ldr	r3, [pc, #328]	; (8002ac8 <MX_CAN_Init+0x27c>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	2203      	movs	r2, #3
 8002984:	765a      	strb	r2, [r3, #25]
  hcan.pTxMsg->Data[6]=byte_01_6;
 8002986:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <MX_CAN_Init+0x27c>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	2204      	movs	r2, #4
 800298c:	769a      	strb	r2, [r3, #26]
  hcan.pTxMsg->Data[7]=0;
 800298e:	4b4e      	ldr	r3, [pc, #312]	; (8002ac8 <MX_CAN_Init+0x27c>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	2200      	movs	r2, #0
 8002994:	76da      	strb	r2, [r3, #27]


  /*Message transmit 2*/


	hcan1.pTxMsg->StdId=0x11;                 /*standard ID*/
 8002996:	4b4e      	ldr	r3, [pc, #312]	; (8002ad0 <MX_CAN_Init+0x284>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	2211      	movs	r2, #17
 800299c:	601a      	str	r2, [r3, #0]
	hcan1.pTxMsg->IDE=CAN_ID_STD;              /*ID is '0' which means it runs in standard format*/
 800299e:	4b4c      	ldr	r3, [pc, #304]	; (8002ad0 <MX_CAN_Init+0x284>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
	hcan1.pTxMsg->RTR=CAN_RTR_DATA;            /*'RTR' is '0' which means data frame*/
 80029a6:	4b4a      	ldr	r3, [pc, #296]	; (8002ad0 <MX_CAN_Init+0x284>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	2200      	movs	r2, #0
 80029ac:	60da      	str	r2, [r3, #12]
	hcan1.pTxMsg->DLC=8;                       /*'8' byte data'*/
 80029ae:	4b48      	ldr	r3, [pc, #288]	; (8002ad0 <MX_CAN_Init+0x284>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	2208      	movs	r2, #8
 80029b4:	611a      	str	r2, [r3, #16]
    hcan1.pTxMsg->Data[0]=byte_02_0;
 80029b6:	4b46      	ldr	r3, [pc, #280]	; (8002ad0 <MX_CAN_Init+0x284>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	2205      	movs	r2, #5
 80029bc:	751a      	strb	r2, [r3, #20]
    hcan1.pTxMsg->Data[1]=byte_02_1;
 80029be:	4b44      	ldr	r3, [pc, #272]	; (8002ad0 <MX_CAN_Init+0x284>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	2206      	movs	r2, #6
 80029c4:	755a      	strb	r2, [r3, #21]
    hcan1.pTxMsg->Data[2]=byte_02_2;
 80029c6:	4b42      	ldr	r3, [pc, #264]	; (8002ad0 <MX_CAN_Init+0x284>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	2207      	movs	r2, #7
 80029cc:	759a      	strb	r2, [r3, #22]
    hcan1.pTxMsg->Data[3]=byte_02_3;
 80029ce:	4b40      	ldr	r3, [pc, #256]	; (8002ad0 <MX_CAN_Init+0x284>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	2208      	movs	r2, #8
 80029d4:	75da      	strb	r2, [r3, #23]
    hcan1.pTxMsg->Data[4]=byte_02_4;
 80029d6:	4b3e      	ldr	r3, [pc, #248]	; (8002ad0 <MX_CAN_Init+0x284>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	2209      	movs	r2, #9
 80029dc:	761a      	strb	r2, [r3, #24]
    hcan1.pTxMsg->Data[5]=byte_02_5;
 80029de:	4b3c      	ldr	r3, [pc, #240]	; (8002ad0 <MX_CAN_Init+0x284>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	220a      	movs	r2, #10
 80029e4:	765a      	strb	r2, [r3, #25]
    hcan1.pTxMsg->Data[6]=byte_02_6;
 80029e6:	4b3a      	ldr	r3, [pc, #232]	; (8002ad0 <MX_CAN_Init+0x284>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	2200      	movs	r2, #0
 80029ec:	769a      	strb	r2, [r3, #26]
    hcan1.pTxMsg->Data[7]=byte_02_7;
 80029ee:	4b38      	ldr	r3, [pc, #224]	; (8002ad0 <MX_CAN_Init+0x284>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	220b      	movs	r2, #11
 80029f4:	76da      	strb	r2, [r3, #27]


    /*Message transmit 3*/

      hcan2.pTxMsg->StdId=0x5;             /*standard ID*/
 80029f6:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <MX_CAN_Init+0x28c>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	2205      	movs	r2, #5
 80029fc:	601a      	str	r2, [r3, #0]
      hcan2.pTxMsg->IDE=CAN_ID_STD;          /*ID is '0' which means it runs in standard format*/
 80029fe:	4b36      	ldr	r3, [pc, #216]	; (8002ad8 <MX_CAN_Init+0x28c>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
      hcan2.pTxMsg->RTR=CAN_RTR_DATA;        /*'RTR' is '0' which means data frame*/
 8002a06:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <MX_CAN_Init+0x28c>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	60da      	str	r2, [r3, #12]
      hcan2.pTxMsg->DLC=8;                   /*'8' byte data'*/
 8002a0e:	4b32      	ldr	r3, [pc, #200]	; (8002ad8 <MX_CAN_Init+0x28c>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	2208      	movs	r2, #8
 8002a14:	611a      	str	r2, [r3, #16]
      hcan2.pTxMsg->Data[0]=byte_05_0;
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <MX_CAN_Init+0x28c>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	751a      	strb	r2, [r3, #20]
      hcan2.pTxMsg->Data[1]=byte_05_1;
 8002a1e:	4b2e      	ldr	r3, [pc, #184]	; (8002ad8 <MX_CAN_Init+0x28c>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	227d      	movs	r2, #125	; 0x7d
 8002a24:	755a      	strb	r2, [r3, #21]
      hcan2.pTxMsg->Data[2]=byte_05_2;
 8002a26:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <MX_CAN_Init+0x28c>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	759a      	strb	r2, [r3, #22]
      hcan2.pTxMsg->Data[3]=byte_05_3;
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <MX_CAN_Init+0x28c>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	2205      	movs	r2, #5
 8002a34:	75da      	strb	r2, [r3, #23]
      hcan2.pTxMsg->Data[4]=byte_05_4;
 8002a36:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <MX_CAN_Init+0x28c>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	761a      	strb	r2, [r3, #24]
      hcan2.pTxMsg->Data[5]=byte_05_5;
 8002a3e:	4b26      	ldr	r3, [pc, #152]	; (8002ad8 <MX_CAN_Init+0x28c>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	2200      	movs	r2, #0
 8002a44:	765a      	strb	r2, [r3, #25]
      hcan2.pTxMsg->Data[6]=byte_05_6;
 8002a46:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <MX_CAN_Init+0x28c>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	769a      	strb	r2, [r3, #26]
      hcan2.pTxMsg->Data[7]=byte_05_7;
 8002a4e:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <MX_CAN_Init+0x28c>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	2200      	movs	r2, #0
 8002a54:	76da      	strb	r2, [r3, #27]



      HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);   /*Setting the priority of CAN receive to '0' and sub priority to '0'*/
 8002a56:	2200      	movs	r2, #0
 8002a58:	2100      	movs	r1, #0
 8002a5a:	2015      	movs	r0, #21
 8002a5c:	f7fe fc89 	bl	8001372 <HAL_NVIC_SetPriority>


  /*if HAL_CAN_Init returns NOT_OK then it is error*/
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002a60:	4819      	ldr	r0, [pc, #100]	; (8002ac8 <MX_CAN_Init+0x27c>)
 8002a62:	f7fd fbbd 	bl	80001e0 <HAL_CAN_Init>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <MX_CAN_Init+0x22a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002a6c:	f240 11c9 	movw	r1, #457	; 0x1c9
 8002a70:	481c      	ldr	r0, [pc, #112]	; (8002ae4 <MX_CAN_Init+0x298>)
 8002a72:	f000 f947 	bl	8002d04 <_Error_Handler>
  }



      hcanR.pRx1Msg=&RxMsg;
 8002a76:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <MX_CAN_Init+0x29c>)
 8002a78:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <MX_CAN_Init+0x2a0>)
 8002a7a:	639a      	str	r2, [r3, #56]	; 0x38

      /*configure the filter of CAN message receiving*/

	  sFilterConfig.FilterNumber = 0;
 8002a7c:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <MX_CAN_Init+0x2a4>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	615a      	str	r2, [r3, #20]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <MX_CAN_Init+0x2a4>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <MX_CAN_Init+0x2a4>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	61da      	str	r2, [r3, #28]
	  sFilterConfig.FilterIdHigh = 0xffff;
 8002a8e:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <MX_CAN_Init+0x2a4>)
 8002a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a94:	601a      	str	r2, [r3, #0]
	  sFilterConfig.FilterIdLow = 0xffff;
 8002a96:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <MX_CAN_Init+0x2a4>)
 8002a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a9c:	605a      	str	r2, [r3, #4]
	  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002a9e:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <MX_CAN_Init+0x2a4>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	609a      	str	r2, [r3, #8]
	  sFilterConfig.FilterMaskIdLow = 0x0000;
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <MX_CAN_Init+0x2a4>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	60da      	str	r2, [r3, #12]
	  sFilterConfig.FilterFIFOAssignment = 1;
 8002aaa:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <MX_CAN_Init+0x2a4>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	611a      	str	r2, [r3, #16]
	  sFilterConfig.FilterActivation = 1;
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <MX_CAN_Init+0x2a4>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	621a      	str	r2, [r3, #32]
	  sFilterConfig.BankNumber = 14;
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <MX_CAN_Init+0x2a4>)
 8002ab8:	220e      	movs	r2, #14
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24

	  /*LPOCU_SafV_83P*/

	  hcanR.pRx1Msg->StdId=0x50;             /*standard ID*/
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <MX_CAN_Init+0x29c>)
 8002abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac0:	2250      	movs	r2, #80	; 0x50
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	e016      	b.n	8002af4 <MX_CAN_Init+0x2a8>
 8002ac6:	bf00      	nop
 8002ac8:	20000054 	.word	0x20000054
 8002acc:	20000200 	.word	0x20000200
 8002ad0:	200001bc 	.word	0x200001bc
 8002ad4:	200000d8 	.word	0x200000d8
 8002ad8:	200000f4 	.word	0x200000f4
 8002adc:	2000017c 	.word	0x2000017c
 8002ae0:	40006400 	.word	0x40006400
 8002ae4:	08003094 	.word	0x08003094
 8002ae8:	20000138 	.word	0x20000138
 8002aec:	20000198 	.word	0x20000198
 8002af0:	2000002c 	.word	0x2000002c
	  hcanR.pRx1Msg->IDE=CAN_ID_STD;          /*ID is '0' which means it runs in standard format*/
 8002af4:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <MX_CAN_Init+0x330>)
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
	  hcanR.pRx1Msg->RTR=CAN_RTR_DATA;        /*'RTR' is '0' which means data frame*/
 8002afc:	4b1f      	ldr	r3, [pc, #124]	; (8002b7c <MX_CAN_Init+0x330>)
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	2200      	movs	r2, #0
 8002b02:	60da      	str	r2, [r3, #12]
	  hcanR.pRx1Msg->DLC=8;                   /*'8' byte data'*/
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <MX_CAN_Init+0x330>)
 8002b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b08:	2208      	movs	r2, #8
 8002b0a:	611a      	str	r2, [r3, #16]

	  hcanR.Instance = CAN1;
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <MX_CAN_Init+0x330>)
 8002b0e:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <MX_CAN_Init+0x334>)
 8002b10:	601a      	str	r2, [r3, #0]
	  hcanR.Init.Prescaler = 3;
 8002b12:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <MX_CAN_Init+0x330>)
 8002b14:	2203      	movs	r2, #3
 8002b16:	605a      	str	r2, [r3, #4]
	  hcanR.Init.Mode = CAN_MODE_NORMAL;    /*CAN working in normal mode*/
 8002b18:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <MX_CAN_Init+0x330>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	609a      	str	r2, [r3, #8]
	  hcanR.Init.SJW = CAN_BS1_1TQ;         /*CAN_synchronisation_jump_width*/
 8002b1e:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <MX_CAN_Init+0x330>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	60da      	str	r2, [r3, #12]
	  hcanR.Init.BS1 = CAN_BS1_12TQ;        /*CAN_time_quantum_in_bit_segment_1*/
 8002b24:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <MX_CAN_Init+0x330>)
 8002b26:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8002b2a:	611a      	str	r2, [r3, #16]
	  hcanR.Init.BS2 = CAN_BS2_3TQ;         /*CAN_time_quantum_in_bit_segment_2*/
 8002b2c:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <MX_CAN_Init+0x330>)
 8002b2e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b32:	615a      	str	r2, [r3, #20]
	  hcanR.Init.TTCM = DISABLE;            /*Disable the time triggered communication mode*/
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <MX_CAN_Init+0x330>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	619a      	str	r2, [r3, #24]
	  hcanR.Init.ABOM = ENABLE;             /*Disable the automatic bus-off management*/
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <MX_CAN_Init+0x330>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	61da      	str	r2, [r3, #28]
	  hcanR.Init.AWUM = ENABLE;             /*Disable the automatic wake-up mode*/
 8002b40:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <MX_CAN_Init+0x330>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	621a      	str	r2, [r3, #32]
	  hcanR.Init.NART = DISABLE;            /*Disable the non-automatic retransmission mode*/
 8002b46:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <MX_CAN_Init+0x330>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	625a      	str	r2, [r3, #36]	; 0x24
	  hcanR.Init.RFLM = DISABLE;            /*Disable the receive FIFO Locked mode( Once a receive FIFO is full the next incoming message will overwrite the previous one.)*/
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <MX_CAN_Init+0x330>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	629a      	str	r2, [r3, #40]	; 0x28
	  hcanR.Init.TXFP = DISABLE;             /* Disable the transmit FIFO priority*/
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <MX_CAN_Init+0x330>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	62da      	str	r2, [r3, #44]	; 0x2c




	  hcanR.pRx1Msg->FIFONumber=CAN_FIFO1;            /*Message received in FIFO1*/
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <MX_CAN_Init+0x330>)
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	621a      	str	r2, [r3, #32]

	  /*if HAL_CAN_ConfigFilter returns NOT_OK then it is error*/

	  if (HAL_CAN_ConfigFilter(&hcanR, &sFilterConfig) != HAL_OK)
 8002b60:	4908      	ldr	r1, [pc, #32]	; (8002b84 <MX_CAN_Init+0x338>)
 8002b62:	4806      	ldr	r0, [pc, #24]	; (8002b7c <MX_CAN_Init+0x330>)
 8002b64:	f7fd fc3c 	bl	80003e0 <HAL_CAN_ConfigFilter>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d004      	beq.n	8002b78 <MX_CAN_Init+0x32c>
	  {
	    /* Filter configuration Error */
	    Error_Handler();
 8002b6e:	f240 11fb 	movw	r1, #507	; 0x1fb
 8002b72:	4805      	ldr	r0, [pc, #20]	; (8002b88 <MX_CAN_Init+0x33c>)
 8002b74:	f000 f8c6 	bl	8002d04 <_Error_Handler>
	  }

}
 8002b78:	bf00      	nop
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20000138 	.word	0x20000138
 8002b80:	40006400 	.word	0x40006400
 8002b84:	2000002c 	.word	0x2000002c
 8002b88:	08003094 	.word	0x08003094

08002b8c <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  /*Configuration to run timer each 1ms*/

   htim3.Instance = TIM3;                          /*using timer3*/
 8002b92:	4b22      	ldr	r3, [pc, #136]	; (8002c1c <MX_TIM3_Init+0x90>)
 8002b94:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <MX_TIM3_Init+0x94>)
 8002b96:	601a      	str	r2, [r3, #0]
   htim3.Init.Prescaler = 1;
 8002b98:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <MX_TIM3_Init+0x90>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	605a      	str	r2, [r3, #4]
   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;   /*counts up*/
 8002b9e:	4b1f      	ldr	r3, [pc, #124]	; (8002c1c <MX_TIM3_Init+0x90>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
   htim3.Init.Period = 24000;
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <MX_TIM3_Init+0x90>)
 8002ba6:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8002baa:	60da      	str	r2, [r3, #12]
   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;   /*TIM_ClockDivision*/
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <MX_TIM3_Init+0x90>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	611a      	str	r2, [r3, #16]
   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb2:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <MX_TIM3_Init+0x90>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	619a      	str	r2, [r3, #24]

   /*if HAL_TIM_Base_Init returns NOT_OK then it is error*/

  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bb8:	4818      	ldr	r0, [pc, #96]	; (8002c1c <MX_TIM3_Init+0x90>)
 8002bba:	f7ff f983 	bl	8001ec4 <HAL_TIM_Base_Init>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d004      	beq.n	8002bce <MX_TIM3_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002bc4:	f44f 7105 	mov.w	r1, #532	; 0x214
 8002bc8:	4816      	ldr	r0, [pc, #88]	; (8002c24 <MX_TIM3_Init+0x98>)
 8002bca:	f000 f89b 	bl	8002d04 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd2:	60bb      	str	r3, [r7, #8]

  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bd4:	f107 0308 	add.w	r3, r7, #8
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4810      	ldr	r0, [pc, #64]	; (8002c1c <MX_TIM3_Init+0x90>)
 8002bdc:	f7ff fabf 	bl	800215e <HAL_TIM_ConfigClockSource>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d004      	beq.n	8002bf0 <MX_TIM3_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002be6:	f240 211b 	movw	r1, #539	; 0x21b
 8002bea:	480e      	ldr	r0, [pc, #56]	; (8002c24 <MX_TIM3_Init+0x98>)
 8002bec:	f000 f88a 	bl	8002d04 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002bf0:	2320      	movs	r3, #32
 8002bf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bf8:	463b      	mov	r3, r7
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4807      	ldr	r0, [pc, #28]	; (8002c1c <MX_TIM3_Init+0x90>)
 8002bfe:	f7ff fcb8 	bl	8002572 <HAL_TIMEx_MasterConfigSynchronization>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d004      	beq.n	8002c12 <MX_TIM3_Init+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c08:	f240 2122 	movw	r1, #546	; 0x222
 8002c0c:	4805      	ldr	r0, [pc, #20]	; (8002c24 <MX_TIM3_Init+0x98>)
 8002c0e:	f000 f879 	bl	8002d04 <_Error_Handler>
  }

}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000098 	.word	0x20000098
 8002c20:	40000400 	.word	0x40000400
 8002c24:	08003094 	.word	0x08003094

08002c28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b098      	sub	sp, #96	; 0x60
 8002c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct3;
  GPIO_InitTypeDef GPIO_InitStruct4;


  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();   /*Clock enable for PORTC*/
 8002c2e:	4a32      	ldr	r2, [pc, #200]	; (8002cf8 <MX_GPIO_Init+0xd0>)
 8002c30:	4b31      	ldr	r3, [pc, #196]	; (8002cf8 <MX_GPIO_Init+0xd0>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	f043 0310 	orr.w	r3, r3, #16
 8002c38:	6193      	str	r3, [r2, #24]
 8002c3a:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <MX_GPIO_Init+0xd0>)
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();  /*Clock enable for PORTD*/
 8002c46:	4a2c      	ldr	r2, [pc, #176]	; (8002cf8 <MX_GPIO_Init+0xd0>)
 8002c48:	4b2b      	ldr	r3, [pc, #172]	; (8002cf8 <MX_GPIO_Init+0xd0>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	f043 0320 	orr.w	r3, r3, #32
 8002c50:	6193      	str	r3, [r2, #24]
 8002c52:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <MX_GPIO_Init+0xd0>)
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();  /*Clock enable for PORTA*/
 8002c5e:	4a26      	ldr	r2, [pc, #152]	; (8002cf8 <MX_GPIO_Init+0xd0>)
 8002c60:	4b25      	ldr	r3, [pc, #148]	; (8002cf8 <MX_GPIO_Init+0xd0>)
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f043 0304 	orr.w	r3, r3, #4
 8002c68:	6193      	str	r3, [r2, #24]
 8002c6a:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <MX_GPIO_Init+0xd0>)
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	607b      	str	r3, [r7, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */

  /* Init PIN_13 in PORTC*/

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002c76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c7a:	653b      	str	r3, [r7, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	657b      	str	r3, [r7, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c80:	2302      	movs	r3, #2
 8002c82:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c88:	4619      	mov	r1, r3
 8002c8a:	481c      	ldr	r0, [pc, #112]	; (8002cfc <MX_GPIO_Init+0xd4>)
 8002c8c:	f7fe fbd0 	bl	8001430 <HAL_GPIO_Init>

  /* Init PIN_0 in PORTA*/

   GPIO_InitStruct1.Pin = GPIO_PIN_0;
 8002c90:	2301      	movs	r3, #1
 8002c92:	643b      	str	r3, [r7, #64]	; 0x40
   GPIO_InitStruct1.Mode = GPIO_MODE_OUTPUT_PP;
 8002c94:	2301      	movs	r3, #1
 8002c96:	647b      	str	r3, [r7, #68]	; 0x44
   GPIO_InitStruct1.Speed = GPIO_SPEED_FREQ_LOW;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct1);
 8002c9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4817      	ldr	r0, [pc, #92]	; (8002d00 <MX_GPIO_Init+0xd8>)
 8002ca4:	f7fe fbc4 	bl	8001430 <HAL_GPIO_Init>

   /* Init PIN_1 in PORTA*/

   GPIO_InitStruct2.Pin = GPIO_PIN_1;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct2.Mode = GPIO_MODE_OUTPUT_PP;
 8002cac:	2301      	movs	r3, #1
 8002cae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct2.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct2);
 8002cb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4811      	ldr	r0, [pc, #68]	; (8002d00 <MX_GPIO_Init+0xd8>)
 8002cbc:	f7fe fbb8 	bl	8001430 <HAL_GPIO_Init>


    /* Init PIN_2 in PORTA*/

    GPIO_InitStruct3.Pin = GPIO_PIN_2;
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	623b      	str	r3, [r7, #32]
     GPIO_InitStruct3.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
     GPIO_InitStruct3.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct3);
 8002ccc:	f107 0320 	add.w	r3, r7, #32
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	480b      	ldr	r0, [pc, #44]	; (8002d00 <MX_GPIO_Init+0xd8>)
 8002cd4:	f7fe fbac 	bl	8001430 <HAL_GPIO_Init>

     /* Init PIN_3 in PORTA*/

     GPIO_InitStruct4.Pin = GPIO_PIN_3;
 8002cd8:	2308      	movs	r3, #8
 8002cda:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct4.Mode = GPIO_MODE_OUTPUT_PP;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct4.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	61fb      	str	r3, [r7, #28]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct4);
 8002ce4:	f107 0310 	add.w	r3, r7, #16
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4805      	ldr	r0, [pc, #20]	; (8002d00 <MX_GPIO_Init+0xd8>)
 8002cec:	f7fe fba0 	bl	8001430 <HAL_GPIO_Init>

}
 8002cf0:	bf00      	nop
 8002cf2:	3760      	adds	r7, #96	; 0x60
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40011000 	.word	0x40011000
 8002d00:	40010800 	.word	0x40010800

08002d04 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002d0e:	e7fe      	b.n	8002d0e <_Error_Handler+0xa>

08002d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d16:	4a21      	ldr	r2, [pc, #132]	; (8002d9c <HAL_MspInit+0x8c>)
 8002d18:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_MspInit+0x8c>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	6193      	str	r3, [r2, #24]
 8002d22:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <HAL_MspInit+0x8c>)
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d2e:	2003      	movs	r0, #3
 8002d30:	f7fe fb14 	bl	800135c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002d34:	2200      	movs	r2, #0
 8002d36:	2100      	movs	r1, #0
 8002d38:	f06f 000b 	mvn.w	r0, #11
 8002d3c:	f7fe fb19 	bl	8001372 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002d40:	2200      	movs	r2, #0
 8002d42:	2100      	movs	r1, #0
 8002d44:	f06f 000a 	mvn.w	r0, #10
 8002d48:	f7fe fb13 	bl	8001372 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2100      	movs	r1, #0
 8002d50:	f06f 0009 	mvn.w	r0, #9
 8002d54:	f7fe fb0d 	bl	8001372 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	f06f 0004 	mvn.w	r0, #4
 8002d60:	f7fe fb07 	bl	8001372 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002d64:	2200      	movs	r2, #0
 8002d66:	2100      	movs	r1, #0
 8002d68:	f06f 0003 	mvn.w	r0, #3
 8002d6c:	f7fe fb01 	bl	8001372 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002d70:	2200      	movs	r2, #0
 8002d72:	2100      	movs	r1, #0
 8002d74:	f06f 0001 	mvn.w	r0, #1
 8002d78:	f7fe fafb 	bl	8001372 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2100      	movs	r1, #0
 8002d80:	f04f 30ff 	mov.w	r0, #4294967295
 8002d84:	f7fe faf5 	bl	8001372 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn,3,0);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2103      	movs	r1, #3
 8002d8c:	2015      	movs	r0, #21
 8002d8e:	f7fe faf0 	bl	8001372 <HAL_NVIC_SetPriority>
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000

08002da0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1a      	ldr	r2, [pc, #104]	; (8002e18 <HAL_CAN_MspInit+0x78>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d12d      	bne.n	8002e0e <HAL_CAN_MspInit+0x6e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002db2:	4a1a      	ldr	r2, [pc, #104]	; (8002e1c <HAL_CAN_MspInit+0x7c>)
 8002db4:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <HAL_CAN_MspInit+0x7c>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dbc:	61d3      	str	r3, [r2, #28]
 8002dbe:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <HAL_CAN_MspInit+0x7c>)
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
  
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002dca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd8:	f107 0310 	add.w	r3, r7, #16
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4810      	ldr	r0, [pc, #64]	; (8002e20 <HAL_CAN_MspInit+0x80>)
 8002de0:	f7fe fb26 	bl	8001430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002de8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dee:	2303      	movs	r3, #3
 8002df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df2:	f107 0310 	add.w	r3, r7, #16
 8002df6:	4619      	mov	r1, r3
 8002df8:	4809      	ldr	r0, [pc, #36]	; (8002e20 <HAL_CAN_MspInit+0x80>)
 8002dfa:	f7fe fb19 	bl	8001430 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 3, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2103      	movs	r1, #3
 8002e02:	2015      	movs	r0, #21
 8002e04:	f7fe fab5 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002e08:	2015      	movs	r0, #21
 8002e0a:	f7fe face 	bl	80013aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002e0e:	bf00      	nop
 8002e10:	3720      	adds	r7, #32
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40006400 	.word	0x40006400
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40010800 	.word	0x40010800

08002e24 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM3)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <HAL_TIM_Base_MspInit+0x44>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d113      	bne.n	8002e5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e36:	4a0d      	ldr	r2, [pc, #52]	; (8002e6c <HAL_TIM_Base_MspInit+0x48>)
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <HAL_TIM_Base_MspInit+0x48>)
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f043 0302 	orr.w	r3, r3, #2
 8002e40:	61d3      	str	r3, [r2, #28]
 8002e42:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <HAL_TIM_Base_MspInit+0x48>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2105      	movs	r1, #5
 8002e52:	201d      	movs	r0, #29
 8002e54:	f7fe fa8d 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e58:	201d      	movs	r0, #29
 8002e5a:	f7fe faa6 	bl	80013aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40000400 	.word	0x40000400
 8002e6c:	40021000 	.word	0x40021000

08002e70 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
           /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e80:	e7fe      	b.n	8002e80 <HardFault_Handler+0x4>

08002e82 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e86:	e7fe      	b.n	8002e86 <MemManage_Handler+0x4>

08002e88 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e8c:	e7fe      	b.n	8002e8c <BusFault_Handler+0x4>

08002e8e <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e92:	e7fe      	b.n	8002e92 <UsageFault_Handler+0x4>

08002e94 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ebc:	f7fd f978 	bl	80001b0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002ec0:	f7fe faaa 	bl	8001418 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <CAN1_RX1_IRQHandler>:
/*void USB_LP_CAN1_RX0_IRQHandler(void)
{
	while(1);
}*/
void CAN1_RX1_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcanR);
 8002ecc:	4807      	ldr	r0, [pc, #28]	; (8002eec <CAN1_RX1_IRQHandler+0x24>)
 8002ece:	f7fd fdbb 	bl	8000a48 <HAL_CAN_IRQHandler>
  __HAL_UNLOCK(&hcanR);
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <CAN1_RX1_IRQHandler+0x24>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d


	HAL_CAN_Receive_IT(&hcanR,CAN_FIFO1);
 8002eda:	2101      	movs	r1, #1
 8002edc:	4803      	ldr	r0, [pc, #12]	; (8002eec <CAN1_RX1_IRQHandler+0x24>)
 8002ede:	f7fd fcfd 	bl	80008dc <HAL_CAN_Receive_IT>
	  flagR=1;
 8002ee2:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <CAN1_RX1_IRQHandler+0x28>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000138 	.word	0x20000138
 8002ef0:	20000021 	.word	0x20000021

08002ef4 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_IRQn 0 */


  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ef8:	4816      	ldr	r0, [pc, #88]	; (8002f54 <TIM3_IRQHandler+0x60>)
 8002efa:	f7ff f828 	bl	8001f4e <HAL_TIM_IRQHandler>

  /* USER CODE BEGIN TIM3_IRQn 1 */
  counter++;
 8002efe:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <TIM3_IRQHandler+0x64>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	3301      	adds	r3, #1
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <TIM3_IRQHandler+0x64>)
 8002f0a:	701a      	strb	r2, [r3, #0]
  counter1++;
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <TIM3_IRQHandler+0x68>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	3301      	adds	r3, #1
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <TIM3_IRQHandler+0x68>)
 8002f18:	701a      	strb	r2, [r3, #0]

 HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);   /*Toggle PIN_13 in PORTC*/
 8002f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f1e:	4810      	ldr	r0, [pc, #64]	; (8002f60 <TIM3_IRQHandler+0x6c>)
 8002f20:	f7fe fbdc 	bl	80016dc <HAL_GPIO_TogglePin>

  if(counter==20)
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <TIM3_IRQHandler+0x64>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b14      	cmp	r3, #20
 8002f2c:	d105      	bne.n	8002f3a <TIM3_IRQHandler+0x46>
  {
	  flag=1;
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <TIM3_IRQHandler+0x70>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]
	  counter=0;
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <TIM3_IRQHandler+0x64>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]

  }
  if(counter1==100 )
 8002f3a:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <TIM3_IRQHandler+0x68>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b64      	cmp	r3, #100	; 0x64
 8002f42:	d105      	bne.n	8002f50 <TIM3_IRQHandler+0x5c>
  {
	  flag2=1;
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <TIM3_IRQHandler+0x74>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
	  counter1=0;
 8002f4a:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <TIM3_IRQHandler+0x68>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM3_IRQn 1 */
}
 8002f50:	bf00      	nop
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000098 	.word	0x20000098
 8002f58:	20000023 	.word	0x20000023
 8002f5c:	20000024 	.word	0x20000024
 8002f60:	40011000 	.word	0x40011000
 8002f64:	20000020 	.word	0x20000020
 8002f68:	20000022 	.word	0x20000022

08002f6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002f70:	4a15      	ldr	r2, [pc, #84]	; (8002fc8 <SystemInit+0x5c>)
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <SystemInit+0x5c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002f7c:	4912      	ldr	r1, [pc, #72]	; (8002fc8 <SystemInit+0x5c>)
 8002f7e:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <SystemInit+0x5c>)
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <SystemInit+0x60>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002f88:	4a0f      	ldr	r2, [pc, #60]	; (8002fc8 <SystemInit+0x5c>)
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <SystemInit+0x5c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f96:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f98:	4a0b      	ldr	r2, [pc, #44]	; (8002fc8 <SystemInit+0x5c>)
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <SystemInit+0x5c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002fa4:	4a08      	ldr	r2, [pc, #32]	; (8002fc8 <SystemInit+0x5c>)
 8002fa6:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <SystemInit+0x5c>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002fae:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <SystemInit+0x5c>)
 8002fb2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002fb6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <SystemInit+0x64>)
 8002fba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fbe:	609a      	str	r2, [r3, #8]
#endif 
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	f8ff0000 	.word	0xf8ff0000
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002fd4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002fd6:	e003      	b.n	8002fe0 <LoopCopyDataInit>

08002fd8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002fda:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002fdc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002fde:	3104      	adds	r1, #4

08002fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002fe0:	480a      	ldr	r0, [pc, #40]	; (800300c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002fe4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002fe6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002fe8:	d3f6      	bcc.n	8002fd8 <CopyDataInit>
  ldr r2, =_sbss
 8002fea:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002fec:	e002      	b.n	8002ff4 <LoopFillZerobss>

08002fee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002ff0:	f842 3b04 	str.w	r3, [r2], #4

08002ff4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002ff6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ff8:	d3f9      	bcc.n	8002fee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ffa:	f7ff ffb7 	bl	8002f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ffe:	f000 f80f 	bl	8003020 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003002:	f7ff fb0d 	bl	8002620 <main>
  bx lr
 8003006:	4770      	bx	lr
  ldr r3, =_sidata
 8003008:	080030bc 	.word	0x080030bc
  ldr r0, =_sdata
 800300c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003010:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8003014:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8003018:	2000021c 	.word	0x2000021c

0800301c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800301c:	e7fe      	b.n	800301c <ADC1_2_IRQHandler>
	...

08003020 <__libc_init_array>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	2500      	movs	r5, #0
 8003024:	4e0c      	ldr	r6, [pc, #48]	; (8003058 <__libc_init_array+0x38>)
 8003026:	4c0d      	ldr	r4, [pc, #52]	; (800305c <__libc_init_array+0x3c>)
 8003028:	1ba4      	subs	r4, r4, r6
 800302a:	10a4      	asrs	r4, r4, #2
 800302c:	42a5      	cmp	r5, r4
 800302e:	d109      	bne.n	8003044 <__libc_init_array+0x24>
 8003030:	f000 f81a 	bl	8003068 <_init>
 8003034:	2500      	movs	r5, #0
 8003036:	4e0a      	ldr	r6, [pc, #40]	; (8003060 <__libc_init_array+0x40>)
 8003038:	4c0a      	ldr	r4, [pc, #40]	; (8003064 <__libc_init_array+0x44>)
 800303a:	1ba4      	subs	r4, r4, r6
 800303c:	10a4      	asrs	r4, r4, #2
 800303e:	42a5      	cmp	r5, r4
 8003040:	d105      	bne.n	800304e <__libc_init_array+0x2e>
 8003042:	bd70      	pop	{r4, r5, r6, pc}
 8003044:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003048:	4798      	blx	r3
 800304a:	3501      	adds	r5, #1
 800304c:	e7ee      	b.n	800302c <__libc_init_array+0xc>
 800304e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003052:	4798      	blx	r3
 8003054:	3501      	adds	r5, #1
 8003056:	e7f2      	b.n	800303e <__libc_init_array+0x1e>
 8003058:	080030b4 	.word	0x080030b4
 800305c:	080030b4 	.word	0x080030b4
 8003060:	080030b4 	.word	0x080030b4
 8003064:	080030b8 	.word	0x080030b8

08003068 <_init>:
 8003068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306a:	bf00      	nop
 800306c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306e:	bc08      	pop	{r3}
 8003070:	469e      	mov	lr, r3
 8003072:	4770      	bx	lr

08003074 <_fini>:
 8003074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003076:	bf00      	nop
 8003078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307a:	bc08      	pop	{r3}
 800307c:	469e      	mov	lr, r3
 800307e:	4770      	bx	lr
